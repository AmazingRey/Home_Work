/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "xkcm.h"

#import "account.h"

@implementation AccountInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId email: (NSString *) email mobileNum: (NSString *) mobileNum userName: (NSString *) userName figureUrl: (NSString *) figureUrl account: (NSString *) account gender: (int) gender
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __mobileNum = [mobileNum retain_stub];
  __mobileNum_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __figureUrl = [figureUrl retain_stub];
  __figureUrl_isset = YES;
  __account = [account retain_stub];
  __account_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileNum"])
  {
    __mobileNum = [[decoder decodeObjectForKey: @"mobileNum"] retain_stub];
    __mobileNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"figureUrl"])
  {
    __figureUrl = [[decoder decodeObjectForKey: @"figureUrl"] retain_stub];
    __figureUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__mobileNum_isset)
  {
    [encoder encodeObject: __mobileNum forKey: @"mobileNum"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__figureUrl_isset)
  {
    [encoder encodeObject: __figureUrl forKey: @"figureUrl"];
  }
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__email release_stub];
  [__mobileNum release_stub];
  [__userName release_stub];
  [__figureUrl release_stub];
  [__account release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) mobileNum {
  return [[__mobileNum retain_stub] autorelease_stub];
}

- (void) setMobileNum: (NSString *) mobileNum {
  [mobileNum retain_stub];
  [__mobileNum release_stub];
  __mobileNum = mobileNum;
  __mobileNum_isset = YES;
}

- (BOOL) mobileNumIsSet {
  return __mobileNum_isset;
}

- (void) unsetMobileNum {
  [__mobileNum release_stub];
  __mobileNum = nil;
  __mobileNum_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) figureUrl {
  return [[__figureUrl retain_stub] autorelease_stub];
}

- (void) setFigureUrl: (NSString *) figureUrl {
  [figureUrl retain_stub];
  [__figureUrl release_stub];
  __figureUrl = figureUrl;
  __figureUrl_isset = YES;
}

- (BOOL) figureUrlIsSet {
  return __figureUrl_isset;
}

- (void) unsetFigureUrl {
  [__figureUrl release_stub];
  __figureUrl = nil;
  __figureUrl_isset = NO;
}

- (NSString *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (NSString *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFigureUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AccountInfo"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileNum_isset) {
    if (__mobileNum != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileNum" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mobileNum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__figureUrl_isset) {
    if (__figureUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"figureUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __figureUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __account];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AccountInfo("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",mobileNum:"];
  [ms appendFormat: @"\"%@\"", __mobileNum];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",figureUrl:"];
  [ms appendFormat: @"\"%@\"", __figureUrl];
  [ms appendString: @",account:"];
  [ms appendFormat: @"\"%@\"", __account];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation accountConstants
+ (void) initialize {
}
@end

@interface sendVerifyCode_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __localCode;
  NSString * __mobileNumber;

  BOOL __commArgs_isset;
  BOOL __localCode_isset;
  BOOL __mobileNumber_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=localCode, setter=setLocalCode:) NSString * localCode;
@property (nonatomic, retain, getter=mobileNumber, setter=setMobileNumber:) NSString * mobileNumber;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) localCode;
- (void) setLocalCode: (NSString *) localCode;
#endif
- (BOOL) localCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobileNumber;
- (void) setMobileNumber: (NSString *) mobileNumber;
#endif
- (BOOL) mobileNumberIsSet;

@end

@implementation sendVerifyCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __localCode = [localCode retain_stub];
  __localCode_isset = YES;
  __mobileNumber = [mobileNumber retain_stub];
  __mobileNumber_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"localCode"])
  {
    __localCode = [[decoder decodeObjectForKey: @"localCode"] retain_stub];
    __localCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileNumber"])
  {
    __mobileNumber = [[decoder decodeObjectForKey: @"mobileNumber"] retain_stub];
    __mobileNumber_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__localCode_isset)
  {
    [encoder encodeObject: __localCode forKey: @"localCode"];
  }
  if (__mobileNumber_isset)
  {
    [encoder encodeObject: __mobileNumber forKey: @"mobileNumber"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__localCode release_stub];
  [__mobileNumber release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) localCode {
  return [[__localCode retain_stub] autorelease_stub];
}

- (void) setLocalCode: (NSString *) localCode {
  [localCode retain_stub];
  [__localCode release_stub];
  __localCode = localCode;
  __localCode_isset = YES;
}

- (BOOL) localCodeIsSet {
  return __localCode_isset;
}

- (void) unsetLocalCode {
  [__localCode release_stub];
  __localCode = nil;
  __localCode_isset = NO;
}

- (NSString *) mobileNumber {
  return [[__mobileNumber retain_stub] autorelease_stub];
}

- (void) setMobileNumber: (NSString *) mobileNumber {
  [mobileNumber retain_stub];
  [__mobileNumber release_stub];
  __mobileNumber = mobileNumber;
  __mobileNumber_isset = YES;
}

- (BOOL) mobileNumberIsSet {
  return __mobileNumber_isset;
}

- (void) unsetMobileNumber {
  [__mobileNumber release_stub];
  __mobileNumber = nil;
  __mobileNumber_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocalCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendVerifyCode_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__localCode_isset) {
    if (__localCode != nil) {
      [outProtocol writeFieldBeginWithName: @"localCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __localCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileNumber_isset) {
    if (__mobileNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileNumber" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mobileNumber];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendVerifyCode_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",localCode:"];
  [ms appendFormat: @"\"%@\"", __localCode];
  [ms appendString: @",mobileNumber:"];
  [ms appendFormat: @"\"%@\"", __mobileNumber];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendVerifyCode_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation SendVerifyCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendVerifyCode_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendVerifyCode_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface validateVerifyCode_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __localCode;
  NSString * __mobileNumber;
  NSString * __verifyCode;

  BOOL __commArgs_isset;
  BOOL __localCode_isset;
  BOOL __mobileNumber_isset;
  BOOL __verifyCode_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=localCode, setter=setLocalCode:) NSString * localCode;
@property (nonatomic, retain, getter=mobileNumber, setter=setMobileNumber:) NSString * mobileNumber;
@property (nonatomic, retain, getter=verifyCode, setter=setVerifyCode:) NSString * verifyCode;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber verifyCode: (NSString *) verifyCode;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) localCode;
- (void) setLocalCode: (NSString *) localCode;
#endif
- (BOOL) localCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobileNumber;
- (void) setMobileNumber: (NSString *) mobileNumber;
#endif
- (BOOL) mobileNumberIsSet;

#if !__has_feature(objc_arc)
- (NSString *) verifyCode;
- (void) setVerifyCode: (NSString *) verifyCode;
#endif
- (BOOL) verifyCodeIsSet;

@end

@implementation validateVerifyCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber verifyCode: (NSString *) verifyCode
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __localCode = [localCode retain_stub];
  __localCode_isset = YES;
  __mobileNumber = [mobileNumber retain_stub];
  __mobileNumber_isset = YES;
  __verifyCode = [verifyCode retain_stub];
  __verifyCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"localCode"])
  {
    __localCode = [[decoder decodeObjectForKey: @"localCode"] retain_stub];
    __localCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileNumber"])
  {
    __mobileNumber = [[decoder decodeObjectForKey: @"mobileNumber"] retain_stub];
    __mobileNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"verifyCode"])
  {
    __verifyCode = [[decoder decodeObjectForKey: @"verifyCode"] retain_stub];
    __verifyCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__localCode_isset)
  {
    [encoder encodeObject: __localCode forKey: @"localCode"];
  }
  if (__mobileNumber_isset)
  {
    [encoder encodeObject: __mobileNumber forKey: @"mobileNumber"];
  }
  if (__verifyCode_isset)
  {
    [encoder encodeObject: __verifyCode forKey: @"verifyCode"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__localCode release_stub];
  [__mobileNumber release_stub];
  [__verifyCode release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) localCode {
  return [[__localCode retain_stub] autorelease_stub];
}

- (void) setLocalCode: (NSString *) localCode {
  [localCode retain_stub];
  [__localCode release_stub];
  __localCode = localCode;
  __localCode_isset = YES;
}

- (BOOL) localCodeIsSet {
  return __localCode_isset;
}

- (void) unsetLocalCode {
  [__localCode release_stub];
  __localCode = nil;
  __localCode_isset = NO;
}

- (NSString *) mobileNumber {
  return [[__mobileNumber retain_stub] autorelease_stub];
}

- (void) setMobileNumber: (NSString *) mobileNumber {
  [mobileNumber retain_stub];
  [__mobileNumber release_stub];
  __mobileNumber = mobileNumber;
  __mobileNumber_isset = YES;
}

- (BOOL) mobileNumberIsSet {
  return __mobileNumber_isset;
}

- (void) unsetMobileNumber {
  [__mobileNumber release_stub];
  __mobileNumber = nil;
  __mobileNumber_isset = NO;
}

- (NSString *) verifyCode {
  return [[__verifyCode retain_stub] autorelease_stub];
}

- (void) setVerifyCode: (NSString *) verifyCode {
  [verifyCode retain_stub];
  [__verifyCode release_stub];
  __verifyCode = verifyCode;
  __verifyCode_isset = YES;
}

- (BOOL) verifyCodeIsSet {
  return __verifyCode_isset;
}

- (void) unsetVerifyCode {
  [__verifyCode release_stub];
  __verifyCode = nil;
  __verifyCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocalCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVerifyCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"validateVerifyCode_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__localCode_isset) {
    if (__localCode != nil) {
      [outProtocol writeFieldBeginWithName: @"localCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __localCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileNumber_isset) {
    if (__mobileNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileNumber" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mobileNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__verifyCode_isset) {
    if (__verifyCode != nil) {
      [outProtocol writeFieldBeginWithName: @"verifyCode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __verifyCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"validateVerifyCode_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",localCode:"];
  [ms appendFormat: @"\"%@\"", __localCode];
  [ms appendString: @",mobileNumber:"];
  [ms appendFormat: @"\"%@\"", __mobileNumber];
  [ms appendString: @",verifyCode:"];
  [ms appendFormat: @"\"%@\"", __verifyCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ValidateVerifyCode_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation ValidateVerifyCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ValidateVerifyCode_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ValidateVerifyCode_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface registerAccount_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __email;
  NSString * __mobileNum;
  NSString * __password;
  NSString * __userName;
  NSString * __account;
  int __gender;

  BOOL __commArgs_isset;
  BOOL __email_isset;
  BOOL __mobileNum_isset;
  BOOL __password_isset;
  BOOL __userName_isset;
  BOOL __account_isset;
  BOOL __gender_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=mobileNum, setter=setMobileNum:) NSString * mobileNum;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, retain, getter=userName, setter=setUserName:) NSString * userName;
@property (nonatomic, retain, getter=account, setter=setAccount:) NSString * account;
@property (nonatomic, getter=gender, setter=setGender:) int gender;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs email: (NSString *) email mobileNum: (NSString *) mobileNum password: (NSString *) password userName: (NSString *) userName account: (NSString *) account gender: (int) gender;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobileNum;
- (void) setMobileNum: (NSString *) mobileNum;
#endif
- (BOOL) mobileNumIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userName;
- (void) setUserName: (NSString *) userName;
#endif
- (BOOL) userNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) account;
- (void) setAccount: (NSString *) account;
#endif
- (BOOL) accountIsSet;

#if !__has_feature(objc_arc)
- (int) gender;
- (void) setGender: (int) gender;
#endif
- (BOOL) genderIsSet;

@end

@implementation registerAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs email: (NSString *) email mobileNum: (NSString *) mobileNum password: (NSString *) password userName: (NSString *) userName account: (NSString *) account gender: (int) gender
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __mobileNum = [mobileNum retain_stub];
  __mobileNum_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __account = [account retain_stub];
  __account_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileNum"])
  {
    __mobileNum = [[decoder decodeObjectForKey: @"mobileNum"] retain_stub];
    __mobileNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__mobileNum_isset)
  {
    [encoder encodeObject: __mobileNum forKey: @"mobileNum"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__email release_stub];
  [__mobileNum release_stub];
  [__password release_stub];
  [__userName release_stub];
  [__account release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) mobileNum {
  return [[__mobileNum retain_stub] autorelease_stub];
}

- (void) setMobileNum: (NSString *) mobileNum {
  [mobileNum retain_stub];
  [__mobileNum release_stub];
  __mobileNum = mobileNum;
  __mobileNum_isset = YES;
}

- (BOOL) mobileNumIsSet {
  return __mobileNum_isset;
}

- (void) unsetMobileNum {
  [__mobileNum release_stub];
  __mobileNum = nil;
  __mobileNum_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (NSString *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerAccount_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileNum_isset) {
    if (__mobileNum != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileNum" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mobileNum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __account];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerAccount_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",mobileNum:"];
  [ms appendFormat: @"\"%@\"", __mobileNum];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",account:"];
  [ms appendFormat: @"\"%@\"", __account];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegisterAccount_result : NSObject <NSCoding> {
  AccountInfo * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AccountInfo * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (AccountInfo *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AccountInfo *) success;
- (void) setSuccess: (AccountInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation RegisterAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AccountInfo *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AccountInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AccountInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AccountInfo *fieldValue = [[AccountInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterAccount_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterAccount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface saveAvatar_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __selfUserId;
  NSString * __formatType;
  NSData * __dataContent;

  BOOL __commArgs_isset;
  BOOL __selfUserId_isset;
  BOOL __formatType_isset;
  BOOL __dataContent_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=selfUserId, setter=setSelfUserId:) NSString * selfUserId;
@property (nonatomic, retain, getter=formatType, setter=setFormatType:) NSString * formatType;
@property (nonatomic, retain, getter=dataContent, setter=setDataContent:) NSData * dataContent;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs selfUserId: (NSString *) selfUserId formatType: (NSString *) formatType dataContent: (NSData *) dataContent;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) selfUserId;
- (void) setSelfUserId: (NSString *) selfUserId;
#endif
- (BOOL) selfUserIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) formatType;
- (void) setFormatType: (NSString *) formatType;
#endif
- (BOOL) formatTypeIsSet;

#if !__has_feature(objc_arc)
- (NSData *) dataContent;
- (void) setDataContent: (NSData *) dataContent;
#endif
- (BOOL) dataContentIsSet;

@end

@implementation saveAvatar_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs selfUserId: (NSString *) selfUserId formatType: (NSString *) formatType dataContent: (NSData *) dataContent
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __selfUserId = [selfUserId retain_stub];
  __selfUserId_isset = YES;
  __formatType = [formatType retain_stub];
  __formatType_isset = YES;
  __dataContent = [dataContent retain_stub];
  __dataContent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"selfUserId"])
  {
    __selfUserId = [[decoder decodeObjectForKey: @"selfUserId"] retain_stub];
    __selfUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"formatType"])
  {
    __formatType = [[decoder decodeObjectForKey: @"formatType"] retain_stub];
    __formatType_isset = YES;
  }
  if ([decoder containsValueForKey: @"dataContent"])
  {
    __dataContent = [[decoder decodeObjectForKey: @"dataContent"] retain_stub];
    __dataContent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__selfUserId_isset)
  {
    [encoder encodeObject: __selfUserId forKey: @"selfUserId"];
  }
  if (__formatType_isset)
  {
    [encoder encodeObject: __formatType forKey: @"formatType"];
  }
  if (__dataContent_isset)
  {
    [encoder encodeObject: __dataContent forKey: @"dataContent"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__selfUserId release_stub];
  [__formatType release_stub];
  [__dataContent release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) selfUserId {
  return [[__selfUserId retain_stub] autorelease_stub];
}

- (void) setSelfUserId: (NSString *) selfUserId {
  [selfUserId retain_stub];
  [__selfUserId release_stub];
  __selfUserId = selfUserId;
  __selfUserId_isset = YES;
}

- (BOOL) selfUserIdIsSet {
  return __selfUserId_isset;
}

- (void) unsetSelfUserId {
  [__selfUserId release_stub];
  __selfUserId = nil;
  __selfUserId_isset = NO;
}

- (NSString *) formatType {
  return [[__formatType retain_stub] autorelease_stub];
}

- (void) setFormatType: (NSString *) formatType {
  [formatType retain_stub];
  [__formatType release_stub];
  __formatType = formatType;
  __formatType_isset = YES;
}

- (BOOL) formatTypeIsSet {
  return __formatType_isset;
}

- (void) unsetFormatType {
  [__formatType release_stub];
  __formatType = nil;
  __formatType_isset = NO;
}

- (NSData *) dataContent {
  return [[__dataContent retain_stub] autorelease_stub];
}

- (void) setDataContent: (NSData *) dataContent {
  [dataContent retain_stub];
  [__dataContent release_stub];
  __dataContent = dataContent;
  __dataContent_isset = YES;
}

- (BOOL) dataContentIsSet {
  return __dataContent_isset;
}

- (void) unsetDataContent {
  [__dataContent release_stub];
  __dataContent = nil;
  __dataContent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSelfUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFormatType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setDataContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveAvatar_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__selfUserId_isset) {
    if (__selfUserId != nil) {
      [outProtocol writeFieldBeginWithName: @"selfUserId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __selfUserId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__formatType_isset) {
    if (__formatType != nil) {
      [outProtocol writeFieldBeginWithName: @"formatType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __formatType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dataContent_isset) {
    if (__dataContent != nil) {
      [outProtocol writeFieldBeginWithName: @"dataContent" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __dataContent];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"saveAvatar_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",selfUserId:"];
  [ms appendFormat: @"\"%@\"", __selfUserId];
  [ms appendString: @",formatType:"];
  [ms appendFormat: @"\"%@\"", __formatType];
  [ms appendString: @",dataContent:"];
  [ms appendFormat: @"\"%@\"", __dataContent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SaveAvatar_result : NSObject <NSCoding> {
  NSString * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation SaveAvatar_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveAvatar_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SaveAvatar_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface validateAccount_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __userAccount;
  NSString * __password;

  BOOL __commArgs_isset;
  BOOL __userAccount_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=userAccount, setter=setUserAccount:) NSString * userAccount;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userAccount;
- (void) setUserAccount: (NSString *) userAccount;
#endif
- (BOOL) userAccountIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation validateAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __userAccount = [userAccount retain_stub];
  __userAccount_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"userAccount"])
  {
    __userAccount = [[decoder decodeObjectForKey: @"userAccount"] retain_stub];
    __userAccount_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__userAccount_isset)
  {
    [encoder encodeObject: __userAccount forKey: @"userAccount"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__userAccount release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) userAccount {
  return [[__userAccount retain_stub] autorelease_stub];
}

- (void) setUserAccount: (NSString *) userAccount {
  [userAccount retain_stub];
  [__userAccount release_stub];
  __userAccount = userAccount;
  __userAccount_isset = YES;
}

- (BOOL) userAccountIsSet {
  return __userAccount_isset;
}

- (void) unsetUserAccount {
  [__userAccount release_stub];
  __userAccount = nil;
  __userAccount_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserAccount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"validateAccount_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userAccount_isset) {
    if (__userAccount != nil) {
      [outProtocol writeFieldBeginWithName: @"userAccount" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userAccount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"validateAccount_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",userAccount:"];
  [ms appendFormat: @"\"%@\"", __userAccount];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ValidateAccount_result : NSObject <NSCoding> {
  AccountInfo * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AccountInfo * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (AccountInfo *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AccountInfo *) success;
- (void) setSuccess: (AccountInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation ValidateAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AccountInfo *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AccountInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AccountInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AccountInfo *fieldValue = [[AccountInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ValidateAccount_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ValidateAccount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface editPassword_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __oldpwd;
  NSString * __newpwd;

  BOOL __commArgs_isset;
  BOOL __oldpwd_isset;
  BOOL __newpwd_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=oldpwd, setter=setOldpwd:) NSString * oldpwd;
@property (nonatomic, retain, getter=newpwd, setter=setNewpwd:) NSString * newpwd;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs oldpwd: (NSString *) oldpwd newpwd: (NSString *) newpwd;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) oldpwd;
- (void) setOldpwd: (NSString *) oldpwd;
#endif
- (BOOL) oldpwdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) newpwd;
- (void) setNewpwd: (NSString *) newpwd;
#endif
- (BOOL) newpwdIsSet;

@end

@implementation editPassword_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs oldpwd: (NSString *) oldpwd newpwd: (NSString *) newpwd
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __oldpwd = [oldpwd retain_stub];
  __oldpwd_isset = YES;
  __newpwd = [newpwd retain_stub];
  __newpwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"oldpwd"])
  {
    __oldpwd = [[decoder decodeObjectForKey: @"oldpwd"] retain_stub];
    __oldpwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"newpwd"])
  {
    __newpwd = [[decoder decodeObjectForKey: @"newpwd"] retain_stub];
    __newpwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__oldpwd_isset)
  {
    [encoder encodeObject: __oldpwd forKey: @"oldpwd"];
  }
  if (__newpwd_isset)
  {
    [encoder encodeObject: __newpwd forKey: @"newpwd"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__oldpwd release_stub];
  [__newpwd release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) oldpwd {
  return [[__oldpwd retain_stub] autorelease_stub];
}

- (void) setOldpwd: (NSString *) oldpwd {
  [oldpwd retain_stub];
  [__oldpwd release_stub];
  __oldpwd = oldpwd;
  __oldpwd_isset = YES;
}

- (BOOL) oldpwdIsSet {
  return __oldpwd_isset;
}

- (void) unsetOldpwd {
  [__oldpwd release_stub];
  __oldpwd = nil;
  __oldpwd_isset = NO;
}

- (NSString *) newpwd {
  return [[__newpwd retain_stub] autorelease_stub];
}

- (void) setNewpwd: (NSString *) newpwd {
  [newpwd retain_stub];
  [__newpwd release_stub];
  __newpwd = newpwd;
  __newpwd_isset = YES;
}

- (BOOL) newpwdIsSet {
  return __newpwd_isset;
}

- (void) unsetNewpwd {
  [__newpwd release_stub];
  __newpwd = nil;
  __newpwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOldpwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewpwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"editPassword_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oldpwd_isset) {
    if (__oldpwd != nil) {
      [outProtocol writeFieldBeginWithName: @"oldpwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oldpwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newpwd_isset) {
    if (__newpwd != nil) {
      [outProtocol writeFieldBeginWithName: @"newpwd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __newpwd];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"editPassword_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",oldpwd:"];
  [ms appendFormat: @"\"%@\"", __oldpwd];
  [ms appendString: @",newpwd:"];
  [ms appendFormat: @"\"%@\"", __newpwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface EditPassword_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation EditPassword_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EditPassword_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EditPassword_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AccountServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_sendVerifyCode: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber
{
  [outProtocol writeMessageBeginWithName: @"sendVerifyCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendVerifyCode_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (localCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"localCode" type: TType_STRING fieldID: 2];
    [outProtocol writeString: localCode];
    [outProtocol writeFieldEnd];
  }
  if (mobileNumber != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobileNumber" type: TType_STRING fieldID: 3];
    [outProtocol writeString: mobileNumber];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_sendVerifyCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SendVerifyCode_result * result = [[[SendVerifyCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) sendVerifyCode: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber
{
  [self send_sendVerifyCode : commArgs localCode: localCode mobileNumber: mobileNumber];
  [self recv_sendVerifyCode];
}

- (void) send_validateVerifyCode: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber verifyCode: (NSString *) verifyCode
{
  [outProtocol writeMessageBeginWithName: @"validateVerifyCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"validateVerifyCode_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (localCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"localCode" type: TType_STRING fieldID: 2];
    [outProtocol writeString: localCode];
    [outProtocol writeFieldEnd];
  }
  if (mobileNumber != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobileNumber" type: TType_STRING fieldID: 3];
    [outProtocol writeString: mobileNumber];
    [outProtocol writeFieldEnd];
  }
  if (verifyCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"verifyCode" type: TType_STRING fieldID: 4];
    [outProtocol writeString: verifyCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_validateVerifyCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ValidateVerifyCode_result * result = [[[ValidateVerifyCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) validateVerifyCode: (CommArgs *) commArgs localCode: (NSString *) localCode mobileNumber: (NSString *) mobileNumber verifyCode: (NSString *) verifyCode
{
  [self send_validateVerifyCode : commArgs localCode: localCode mobileNumber: mobileNumber verifyCode: verifyCode];
  [self recv_validateVerifyCode];
}

- (void) send_registerAccount: (CommArgs *) commArgs email: (NSString *) email mobileNum: (NSString *) mobileNum password: (NSString *) password userName: (NSString *) userName account: (NSString *) account gender: (int) gender
{
  [outProtocol writeMessageBeginWithName: @"registerAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerAccount_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (mobileNum != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobileNum" type: TType_STRING fieldID: 3];
    [outProtocol writeString: mobileNum];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (userName != nil)  {
    [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 5];
    [outProtocol writeString: userName];
    [outProtocol writeFieldEnd];
  }
  if (account != nil)  {
    [outProtocol writeFieldBeginWithName: @"account" type: TType_STRING fieldID: 6];
    [outProtocol writeString: account];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 7];
  [outProtocol writeI32: gender];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AccountInfo *) recv_registerAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RegisterAccount_result * result = [[[RegisterAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerAccount failed: unknown result"];
}

- (AccountInfo *) registerAccount: (CommArgs *) commArgs email: (NSString *) email mobileNum: (NSString *) mobileNum password: (NSString *) password userName: (NSString *) userName account: (NSString *) account gender: (int) gender
{
  [self send_registerAccount : commArgs email: email mobileNum: mobileNum password: password userName: userName account: account gender: gender];
  return [self recv_registerAccount];
}

- (void) send_saveAvatar: (CommArgs *) commArgs selfUserId: (NSString *) selfUserId formatType: (NSString *) formatType dataContent: (NSData *) dataContent
{
  [outProtocol writeMessageBeginWithName: @"saveAvatar" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveAvatar_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (selfUserId != nil)  {
    [outProtocol writeFieldBeginWithName: @"selfUserId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: selfUserId];
    [outProtocol writeFieldEnd];
  }
  if (formatType != nil)  {
    [outProtocol writeFieldBeginWithName: @"formatType" type: TType_STRING fieldID: 3];
    [outProtocol writeString: formatType];
    [outProtocol writeFieldEnd];
  }
  if (dataContent != nil)  {
    [outProtocol writeFieldBeginWithName: @"dataContent" type: TType_STRING fieldID: 4];
    [outProtocol writeBinary: dataContent];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_saveAvatar
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SaveAvatar_result * result = [[[SaveAvatar_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"saveAvatar failed: unknown result"];
}

- (NSString *) saveAvatar: (CommArgs *) commArgs selfUserId: (NSString *) selfUserId formatType: (NSString *) formatType dataContent: (NSData *) dataContent
{
  [self send_saveAvatar : commArgs selfUserId: selfUserId formatType: formatType dataContent: dataContent];
  return [self recv_saveAvatar];
}

- (void) send_validateAccount: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"validateAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"validateAccount_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userAccount != nil)  {
    [outProtocol writeFieldBeginWithName: @"userAccount" type: TType_STRING fieldID: 2];
    [outProtocol writeString: userAccount];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AccountInfo *) recv_validateAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ValidateAccount_result * result = [[[ValidateAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"validateAccount failed: unknown result"];
}

- (AccountInfo *) validateAccount: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password
{
  [self send_validateAccount : commArgs userAccount: userAccount password: password];
  return [self recv_validateAccount];
}

- (void) send_editPassword: (CommArgs *) commArgs oldpwd: (NSString *) oldpwd newpwd: (NSString *) newpwd
{
  [outProtocol writeMessageBeginWithName: @"editPassword" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"editPassword_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (oldpwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"oldpwd" type: TType_STRING fieldID: 2];
    [outProtocol writeString: oldpwd];
    [outProtocol writeFieldEnd];
  }
  if (newpwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"newpwd" type: TType_STRING fieldID: 3];
    [outProtocol writeString: newpwd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_editPassword
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EditPassword_result * result = [[[EditPassword_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) editPassword: (CommArgs *) commArgs oldpwd: (NSString *) oldpwd newpwd: (NSString *) newpwd
{
  [self send_editPassword : commArgs oldpwd: oldpwd newpwd: newpwd];
  [self recv_editPassword];
}

@end

@implementation AccountServiceProcessor

- (id) initWithAccountService: (id <AccountService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_sendVerifyCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"sendVerifyCode"];
  }
  {
    SEL s = @selector(process_validateVerifyCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"validateVerifyCode"];
  }
  {
    SEL s = @selector(process_registerAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerAccount"];
  }
  {
    SEL s = @selector(process_saveAvatar_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"saveAvatar"];
  }
  {
    SEL s = @selector(process_validateAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"validateAccount"];
  }
  {
    SEL s = @selector(process_editPassword_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"editPassword"];
  }
  return self;
}

- (id<AccountService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_sendVerifyCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  sendVerifyCode_args * args = [[sendVerifyCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SendVerifyCode_result * result = [[SendVerifyCode_result alloc] init];
  [mService sendVerifyCode: [args commArgs] localCode: [args localCode] mobileNumber: [args mobileNumber]];
  [outProtocol writeMessageBeginWithName: @"sendVerifyCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_validateVerifyCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  validateVerifyCode_args * args = [[validateVerifyCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ValidateVerifyCode_result * result = [[ValidateVerifyCode_result alloc] init];
  [mService validateVerifyCode: [args commArgs] localCode: [args localCode] mobileNumber: [args mobileNumber] verifyCode: [args verifyCode]];
  [outProtocol writeMessageBeginWithName: @"validateVerifyCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_registerAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  registerAccount_args * args = [[registerAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RegisterAccount_result * result = [[RegisterAccount_result alloc] init];
  [result setSuccess: [mService registerAccount: [args commArgs] email: [args email] mobileNum: [args mobileNum] password: [args password] userName: [args userName] account: [args account] gender: [args gender]]];
  [outProtocol writeMessageBeginWithName: @"registerAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_saveAvatar_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  saveAvatar_args * args = [[saveAvatar_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SaveAvatar_result * result = [[SaveAvatar_result alloc] init];
  [result setSuccess: [mService saveAvatar: [args commArgs] selfUserId: [args selfUserId] formatType: [args formatType] dataContent: [args dataContent]]];
  [outProtocol writeMessageBeginWithName: @"saveAvatar"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_validateAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  validateAccount_args * args = [[validateAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ValidateAccount_result * result = [[ValidateAccount_result alloc] init];
  [result setSuccess: [mService validateAccount: [args commArgs] userAccount: [args userAccount] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"validateAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_editPassword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  editPassword_args * args = [[editPassword_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  EditPassword_result * result = [[EditPassword_result alloc] init];
  [mService editPassword: [args commArgs] oldpwd: [args oldpwd] newpwd: [args newpwd]];
  [outProtocol writeMessageBeginWithName: @"editPassword"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

