/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "xkcm.h"
#import "family.h"

#import "user.h"

@implementation UserInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId email: (NSString *) email mobileNum: (NSString *) mobileNum userName: (NSString *) userName figureUrl: (NSString *) figureUrl birthday: (NSString *) birthday gender: (int) gender telephone: (NSString *) telephone qq: (NSString *) qq
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __mobileNum = [mobileNum retain_stub];
  __mobileNum_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __figureUrl = [figureUrl retain_stub];
  __figureUrl_isset = YES;
  __birthday = [birthday retain_stub];
  __birthday_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __telephone = [telephone retain_stub];
  __telephone_isset = YES;
  __qq = [qq retain_stub];
  __qq_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileNum"])
  {
    __mobileNum = [[decoder decodeObjectForKey: @"mobileNum"] retain_stub];
    __mobileNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"figureUrl"])
  {
    __figureUrl = [[decoder decodeObjectForKey: @"figureUrl"] retain_stub];
    __figureUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [[decoder decodeObjectForKey: @"birthday"] retain_stub];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"telephone"])
  {
    __telephone = [[decoder decodeObjectForKey: @"telephone"] retain_stub];
    __telephone_isset = YES;
  }
  if ([decoder containsValueForKey: @"qq"])
  {
    __qq = [[decoder decodeObjectForKey: @"qq"] retain_stub];
    __qq_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__mobileNum_isset)
  {
    [encoder encodeObject: __mobileNum forKey: @"mobileNum"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__figureUrl_isset)
  {
    [encoder encodeObject: __figureUrl forKey: @"figureUrl"];
  }
  if (__birthday_isset)
  {
    [encoder encodeObject: __birthday forKey: @"birthday"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
  if (__telephone_isset)
  {
    [encoder encodeObject: __telephone forKey: @"telephone"];
  }
  if (__qq_isset)
  {
    [encoder encodeObject: __qq forKey: @"qq"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__email release_stub];
  [__mobileNum release_stub];
  [__userName release_stub];
  [__figureUrl release_stub];
  [__birthday release_stub];
  [__telephone release_stub];
  [__qq release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) mobileNum {
  return [[__mobileNum retain_stub] autorelease_stub];
}

- (void) setMobileNum: (NSString *) mobileNum {
  [mobileNum retain_stub];
  [__mobileNum release_stub];
  __mobileNum = mobileNum;
  __mobileNum_isset = YES;
}

- (BOOL) mobileNumIsSet {
  return __mobileNum_isset;
}

- (void) unsetMobileNum {
  [__mobileNum release_stub];
  __mobileNum = nil;
  __mobileNum_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) figureUrl {
  return [[__figureUrl retain_stub] autorelease_stub];
}

- (void) setFigureUrl: (NSString *) figureUrl {
  [figureUrl retain_stub];
  [__figureUrl release_stub];
  __figureUrl = figureUrl;
  __figureUrl_isset = YES;
}

- (BOOL) figureUrlIsSet {
  return __figureUrl_isset;
}

- (void) unsetFigureUrl {
  [__figureUrl release_stub];
  __figureUrl = nil;
  __figureUrl_isset = NO;
}

- (NSString *) birthday {
  return [[__birthday retain_stub] autorelease_stub];
}

- (void) setBirthday: (NSString *) birthday {
  [birthday retain_stub];
  [__birthday release_stub];
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  [__birthday release_stub];
  __birthday = nil;
  __birthday_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) telephone {
  return [[__telephone retain_stub] autorelease_stub];
}

- (void) setTelephone: (NSString *) telephone {
  [telephone retain_stub];
  [__telephone release_stub];
  __telephone = telephone;
  __telephone_isset = YES;
}

- (BOOL) telephoneIsSet {
  return __telephone_isset;
}

- (void) unsetTelephone {
  [__telephone release_stub];
  __telephone = nil;
  __telephone_isset = NO;
}

- (NSString *) qq {
  return [[__qq retain_stub] autorelease_stub];
}

- (void) setQq: (NSString *) qq {
  [qq retain_stub];
  [__qq release_stub];
  __qq = qq;
  __qq_isset = YES;
}

- (BOOL) qqIsSet {
  return __qq_isset;
}

- (void) unsetQq {
  [__qq release_stub];
  __qq = nil;
  __qq_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFigureUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelephone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfo"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileNum_isset) {
    if (__mobileNum != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileNum" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mobileNum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__figureUrl_isset) {
    if (__figureUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"figureUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __figureUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthday_isset) {
    if (__birthday != nil) {
      [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __birthday];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__telephone_isset) {
    if (__telephone != nil) {
      [outProtocol writeFieldBeginWithName: @"telephone" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __telephone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qq_isset) {
    if (__qq != nil) {
      [outProtocol writeFieldBeginWithName: @"qq" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __qq];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfo("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",mobileNum:"];
  [ms appendFormat: @"\"%@\"", __mobileNum];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",figureUrl:"];
  [ms appendFormat: @"\"%@\"", __figureUrl];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"\"%@\"", __birthday];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",telephone:"];
  [ms appendFormat: @"\"%@\"", __telephone];
  [ms appendString: @",qq:"];
  [ms appendFormat: @"\"%@\"", __qq];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation WatchInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIsBound: (BOOL) isBound
{
  self = [super init];
  __isBound = isBound;
  __isBound_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"isBound"])
  {
    __isBound = [decoder decodeBoolForKey: @"isBound"];
    __isBound_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__isBound_isset)
  {
    [encoder encodeBool: __isBound forKey: @"isBound"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) isBound {
  return __isBound;
}

- (void) setIsBound: (BOOL) isBound {
  __isBound = isBound;
  __isBound_isset = YES;
}

- (BOOL) isBoundIsSet {
  return __isBound_isset;
}

- (void) unsetIsBound {
  __isBound_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsBound: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"WatchInfo"];
  if (__isBound_isset) {
    [outProtocol writeFieldBeginWithName: @"isBound" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __isBound];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"WatchInfo("];
  [ms appendString: @"isBound:"];
  [ms appendFormat: @"%i", __isBound];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation userConstants
+ (void) initialize {
}
@end

@interface searchUsers_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __condition;

  BOOL __commArgs_isset;
  BOOL __condition_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=condition, setter=setCondition:) NSString * condition;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs condition: (NSString *) condition;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) condition;
- (void) setCondition: (NSString *) condition;
#endif
- (BOOL) conditionIsSet;

@end

@implementation searchUsers_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs condition: (NSString *) condition
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __condition = [condition retain_stub];
  __condition_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"condition"])
  {
    __condition = [[decoder decodeObjectForKey: @"condition"] retain_stub];
    __condition_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__condition_isset)
  {
    [encoder encodeObject: __condition forKey: @"condition"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__condition release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) condition {
  return [[__condition retain_stub] autorelease_stub];
}

- (void) setCondition: (NSString *) condition {
  [condition retain_stub];
  [__condition release_stub];
  __condition = condition;
  __condition_isset = YES;
}

- (BOOL) conditionIsSet {
  return __condition_isset;
}

- (void) unsetCondition {
  [__condition release_stub];
  __condition = nil;
  __condition_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCondition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchUsers_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__condition_isset) {
    if (__condition != nil) {
      [outProtocol writeFieldBeginWithName: @"condition" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __condition];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"searchUsers_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",condition:"];
  [ms appendFormat: @"\"%@\"", __condition];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SearchUsers_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation SearchUsers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            UserInfo *_elem2 = [[UserInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchUsers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchUsers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface changeUserName_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __newUserName;

  BOOL __commArgs_isset;
  BOOL __newUserName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=newUserName, setter=setNewUserName:) NSString * newUserName;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs newUserName: (NSString *) newUserName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) newUserName;
- (void) setNewUserName: (NSString *) newUserName;
#endif
- (BOOL) newUserNameIsSet;

@end

@implementation changeUserName_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs newUserName: (NSString *) newUserName
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __newUserName = [newUserName retain_stub];
  __newUserName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"newUserName"])
  {
    __newUserName = [[decoder decodeObjectForKey: @"newUserName"] retain_stub];
    __newUserName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__newUserName_isset)
  {
    [encoder encodeObject: __newUserName forKey: @"newUserName"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__newUserName release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) newUserName {
  return [[__newUserName retain_stub] autorelease_stub];
}

- (void) setNewUserName: (NSString *) newUserName {
  [newUserName retain_stub];
  [__newUserName release_stub];
  __newUserName = newUserName;
  __newUserName_isset = YES;
}

- (BOOL) newUserNameIsSet {
  return __newUserName_isset;
}

- (void) unsetNewUserName {
  [__newUserName release_stub];
  __newUserName = nil;
  __newUserName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"changeUserName_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newUserName_isset) {
    if (__newUserName != nil) {
      [outProtocol writeFieldBeginWithName: @"newUserName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __newUserName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"changeUserName_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",newUserName:"];
  [ms appendFormat: @"\"%@\"", __newUserName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ChangeUserName_result : NSObject <NSCoding> {
  ReturnMessage * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ReturnMessage * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (ReturnMessage *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ReturnMessage *) success;
- (void) setSuccess: (ReturnMessage *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation ChangeUserName_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ReturnMessage *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (ReturnMessage *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ReturnMessage *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ReturnMessage *fieldValue = [[ReturnMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChangeUserName_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChangeUserName_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface updateBirthday_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __userId;
  NSString * __birthday;

  BOOL __commArgs_isset;
  BOOL __userId_isset;
  BOOL __birthday_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=birthday, setter=setBirthday:) NSString * birthday;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs userId: (NSString *) userId birthday: (NSString *) birthday;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) birthday;
- (void) setBirthday: (NSString *) birthday;
#endif
- (BOOL) birthdayIsSet;

@end

@implementation updateBirthday_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs userId: (NSString *) userId birthday: (NSString *) birthday
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __birthday = [birthday retain_stub];
  __birthday_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [[decoder decodeObjectForKey: @"birthday"] retain_stub];
    __birthday_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__birthday_isset)
  {
    [encoder encodeObject: __birthday forKey: @"birthday"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__userId release_stub];
  [__birthday release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) birthday {
  return [[__birthday retain_stub] autorelease_stub];
}

- (void) setBirthday: (NSString *) birthday {
  [birthday retain_stub];
  [__birthday release_stub];
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  [__birthday release_stub];
  __birthday = nil;
  __birthday_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"updateBirthday_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthday_isset) {
    if (__birthday != nil) {
      [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __birthday];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"updateBirthday_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"\"%@\"", __birthday];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UpdateBirthday_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation UpdateBirthday_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateBirthday_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateBirthday_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface updateLocation_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __userId;
  NSString * __districtCode;
  NSString * __district;

  BOOL __commArgs_isset;
  BOOL __userId_isset;
  BOOL __districtCode_isset;
  BOOL __district_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=userId, setter=setUserId:) NSString * userId;
@property (nonatomic, retain, getter=districtCode, setter=setDistrictCode:) NSString * districtCode;
@property (nonatomic, retain, getter=district, setter=setDistrict:) NSString * district;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs userId: (NSString *) userId districtCode: (NSString *) districtCode district: (NSString *) district;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userId;
- (void) setUserId: (NSString *) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) districtCode;
- (void) setDistrictCode: (NSString *) districtCode;
#endif
- (BOOL) districtCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) district;
- (void) setDistrict: (NSString *) district;
#endif
- (BOOL) districtIsSet;

@end

@implementation updateLocation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs userId: (NSString *) userId districtCode: (NSString *) districtCode district: (NSString *) district
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __districtCode = [districtCode retain_stub];
  __districtCode_isset = YES;
  __district = [district retain_stub];
  __district_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"districtCode"])
  {
    __districtCode = [[decoder decodeObjectForKey: @"districtCode"] retain_stub];
    __districtCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"district"])
  {
    __district = [[decoder decodeObjectForKey: @"district"] retain_stub];
    __district_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__districtCode_isset)
  {
    [encoder encodeObject: __districtCode forKey: @"districtCode"];
  }
  if (__district_isset)
  {
    [encoder encodeObject: __district forKey: @"district"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__userId release_stub];
  [__districtCode release_stub];
  [__district release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) districtCode {
  return [[__districtCode retain_stub] autorelease_stub];
}

- (void) setDistrictCode: (NSString *) districtCode {
  [districtCode retain_stub];
  [__districtCode release_stub];
  __districtCode = districtCode;
  __districtCode_isset = YES;
}

- (BOOL) districtCodeIsSet {
  return __districtCode_isset;
}

- (void) unsetDistrictCode {
  [__districtCode release_stub];
  __districtCode = nil;
  __districtCode_isset = NO;
}

- (NSString *) district {
  return [[__district retain_stub] autorelease_stub];
}

- (void) setDistrict: (NSString *) district {
  [district retain_stub];
  [__district release_stub];
  __district = district;
  __district_isset = YES;
}

- (BOOL) districtIsSet {
  return __district_isset;
}

- (void) unsetDistrict {
  [__district release_stub];
  __district = nil;
  __district_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrictCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDistrict: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"updateLocation_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__districtCode_isset) {
    if (__districtCode != nil) {
      [outProtocol writeFieldBeginWithName: @"districtCode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __districtCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__district_isset) {
    if (__district != nil) {
      [outProtocol writeFieldBeginWithName: @"district" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __district];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"updateLocation_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",districtCode:"];
  [ms appendFormat: @"\"%@\"", __districtCode];
  [ms appendString: @",district:"];
  [ms appendFormat: @"\"%@\"", __district];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UpdateLocation_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation UpdateLocation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateLocation_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateLocation_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setUserInfo_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  UserInfo * __userInfo;

  BOOL __commArgs_isset;
  BOOL __userInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=userInfo, setter=setUserInfo:) UserInfo * userInfo;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs userInfo: (UserInfo *) userInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (UserInfo *) userInfo;
- (void) setUserInfo: (UserInfo *) userInfo;
#endif
- (BOOL) userInfoIsSet;

@end

@implementation setUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs userInfo: (UserInfo *) userInfo
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __userInfo = [userInfo retain_stub];
  __userInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"userInfo"])
  {
    __userInfo = [[decoder decodeObjectForKey: @"userInfo"] retain_stub];
    __userInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__userInfo_isset)
  {
    [encoder encodeObject: __userInfo forKey: @"userInfo"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__userInfo release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (UserInfo *) userInfo {
  return [[__userInfo retain_stub] autorelease_stub];
}

- (void) setUserInfo: (UserInfo *) userInfo {
  [userInfo retain_stub];
  [__userInfo release_stub];
  __userInfo = userInfo;
  __userInfo_isset = YES;
}

- (BOOL) userInfoIsSet {
  return __userInfo_isset;
}

- (void) unsetUserInfo {
  [__userInfo release_stub];
  __userInfo = nil;
  __userInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setUserInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setUserInfo_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userInfo_isset) {
    if (__userInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"userInfo" type: TType_STRUCT fieldID: 2];
      [__userInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setUserInfo_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",userInfo:"];
  [ms appendFormat: @"%@", __userInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetUserInfo_result : NSObject <NSCoding> {
  ReturnMessage * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ReturnMessage * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (ReturnMessage *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ReturnMessage *) success;
- (void) setSuccess: (ReturnMessage *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation SetUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ReturnMessage *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (ReturnMessage *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ReturnMessage *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ReturnMessage *fieldValue = [[ReturnMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUserInfo_args : NSObject <NSCoding> {
  CommArgs * __commArgs;

  BOOL __commArgs_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

@end

@implementation getUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUserInfo_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUserInfo_result : NSObject <NSCoding> {
  UserInfo * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserInfo * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (UserInfo *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (UserInfo *) success;
- (void) setSuccess: (UserInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation GetUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UserInfo *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (UserInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UserInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getWatchInfo_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __userID;

  BOOL __commArgs_isset;
  BOOL __userID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=userID, setter=setUserID:) NSString * userID;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs userID: (NSString *) userID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userID;
- (void) setUserID: (NSString *) userID;
#endif
- (BOOL) userIDIsSet;

@end

@implementation getWatchInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs userID: (NSString *) userID
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __userID = [userID retain_stub];
  __userID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"userID"])
  {
    __userID = [[decoder decodeObjectForKey: @"userID"] retain_stub];
    __userID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__userID_isset)
  {
    [encoder encodeObject: __userID forKey: @"userID"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__userID release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) userID {
  return [[__userID retain_stub] autorelease_stub];
}

- (void) setUserID: (NSString *) userID {
  [userID retain_stub];
  [__userID release_stub];
  __userID = userID;
  __userID_isset = YES;
}

- (BOOL) userIDIsSet {
  return __userID_isset;
}

- (void) unsetUserID {
  [__userID release_stub];
  __userID = nil;
  __userID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getWatchInfo_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userID_isset) {
    if (__userID != nil) {
      [outProtocol writeFieldBeginWithName: @"userID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userID];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getWatchInfo_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",userID:"];
  [ms appendFormat: @"\"%@\"", __userID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetWatchInfo_result : NSObject <NSCoding> {
  WatchInfo * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) WatchInfo * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (WatchInfo *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (WatchInfo *) success;
- (void) setSuccess: (WatchInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation GetWatchInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (WatchInfo *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (WatchInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (WatchInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          WatchInfo *fieldValue = [[WatchInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetWatchInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetWatchInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_searchUsers: (CommArgs *) commArgs condition: (NSString *) condition
{
  [outProtocol writeMessageBeginWithName: @"searchUsers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchUsers_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (condition != nil)  {
    [outProtocol writeFieldBeginWithName: @"condition" type: TType_STRING fieldID: 2];
    [outProtocol writeString: condition];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_searchUsers
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SearchUsers_result * result = [[[SearchUsers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchUsers failed: unknown result"];
}

- (NSMutableArray *) searchUsers: (CommArgs *) commArgs condition: (NSString *) condition
{
  [self send_searchUsers : commArgs condition: condition];
  return [self recv_searchUsers];
}

- (void) send_changeUserName: (CommArgs *) commArgs newUserName: (NSString *) newUserName
{
  [outProtocol writeMessageBeginWithName: @"changeUserName" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"changeUserName_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (newUserName != nil)  {
    [outProtocol writeFieldBeginWithName: @"newUserName" type: TType_STRING fieldID: 2];
    [outProtocol writeString: newUserName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ReturnMessage *) recv_changeUserName
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ChangeUserName_result * result = [[[ChangeUserName_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"changeUserName failed: unknown result"];
}

- (ReturnMessage *) changeUserName: (CommArgs *) commArgs newUserName: (NSString *) newUserName
{
  [self send_changeUserName : commArgs newUserName: newUserName];
  return [self recv_changeUserName];
}

- (void) send_updateBirthday: (CommArgs *) commArgs userId: (NSString *) userId birthday: (NSString *) birthday
{
  [outProtocol writeMessageBeginWithName: @"updateBirthday" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"updateBirthday_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (birthday != nil)  {
    [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 3];
    [outProtocol writeString: birthday];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_updateBirthday
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UpdateBirthday_result * result = [[[UpdateBirthday_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) updateBirthday: (CommArgs *) commArgs userId: (NSString *) userId birthday: (NSString *) birthday
{
  [self send_updateBirthday : commArgs userId: userId birthday: birthday];
  [self recv_updateBirthday];
}

- (void) send_updateLocation: (CommArgs *) commArgs userId: (NSString *) userId districtCode: (NSString *) districtCode district: (NSString *) district
{
  [outProtocol writeMessageBeginWithName: @"updateLocation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"updateLocation_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userId != nil)  {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: userId];
    [outProtocol writeFieldEnd];
  }
  if (districtCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"districtCode" type: TType_STRING fieldID: 3];
    [outProtocol writeString: districtCode];
    [outProtocol writeFieldEnd];
  }
  if (district != nil)  {
    [outProtocol writeFieldBeginWithName: @"district" type: TType_STRING fieldID: 4];
    [outProtocol writeString: district];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_updateLocation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UpdateLocation_result * result = [[[UpdateLocation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) updateLocation: (CommArgs *) commArgs userId: (NSString *) userId districtCode: (NSString *) districtCode district: (NSString *) district
{
  [self send_updateLocation : commArgs userId: userId districtCode: districtCode district: district];
  [self recv_updateLocation];
}

- (void) send_setUserInfo: (CommArgs *) commArgs userInfo: (UserInfo *) userInfo
{
  [outProtocol writeMessageBeginWithName: @"setUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setUserInfo_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"userInfo" type: TType_STRUCT fieldID: 2];
    [userInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ReturnMessage *) recv_setUserInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SetUserInfo_result * result = [[[SetUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setUserInfo failed: unknown result"];
}

- (ReturnMessage *) setUserInfo: (CommArgs *) commArgs userInfo: (UserInfo *) userInfo
{
  [self send_setUserInfo : commArgs userInfo: userInfo];
  return [self recv_setUserInfo];
}

- (void) send_getUserInfo: (CommArgs *) commArgs
{
  [outProtocol writeMessageBeginWithName: @"getUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UserInfo *) recv_getUserInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetUserInfo_result * result = [[[GetUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserInfo failed: unknown result"];
}

- (UserInfo *) getUserInfo: (CommArgs *) commArgs
{
  [self send_getUserInfo : commArgs];
  return [self recv_getUserInfo];
}

- (void) send_getWatchInfo: (CommArgs *) commArgs userID: (NSString *) userID
{
  [outProtocol writeMessageBeginWithName: @"getWatchInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getWatchInfo_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userID != nil)  {
    [outProtocol writeFieldBeginWithName: @"userID" type: TType_STRING fieldID: 2];
    [outProtocol writeString: userID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (WatchInfo *) recv_getWatchInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetWatchInfo_result * result = [[[GetWatchInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getWatchInfo failed: unknown result"];
}

- (WatchInfo *) getWatchInfo: (CommArgs *) commArgs userID: (NSString *) userID
{
  [self send_getWatchInfo : commArgs userID: userID];
  return [self recv_getWatchInfo];
}

@end

@implementation UserServiceProcessor

- (id) initWithUserService: (id <UserService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_searchUsers_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"searchUsers"];
  }
  {
    SEL s = @selector(process_changeUserName_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"changeUserName"];
  }
  {
    SEL s = @selector(process_updateBirthday_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"updateBirthday"];
  }
  {
    SEL s = @selector(process_updateLocation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"updateLocation"];
  }
  {
    SEL s = @selector(process_setUserInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setUserInfo"];
  }
  {
    SEL s = @selector(process_getUserInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUserInfo"];
  }
  {
    SEL s = @selector(process_getWatchInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getWatchInfo"];
  }
  return self;
}

- (id<UserService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_searchUsers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  searchUsers_args * args = [[searchUsers_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SearchUsers_result * result = [[SearchUsers_result alloc] init];
  [result setSuccess: [mService searchUsers: [args commArgs] condition: [args condition]]];
  [outProtocol writeMessageBeginWithName: @"searchUsers"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_changeUserName_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  changeUserName_args * args = [[changeUserName_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ChangeUserName_result * result = [[ChangeUserName_result alloc] init];
  [result setSuccess: [mService changeUserName: [args commArgs] newUserName: [args newUserName]]];
  [outProtocol writeMessageBeginWithName: @"changeUserName"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_updateBirthday_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  updateBirthday_args * args = [[updateBirthday_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UpdateBirthday_result * result = [[UpdateBirthday_result alloc] init];
  [mService updateBirthday: [args commArgs] userId: [args userId] birthday: [args birthday]];
  [outProtocol writeMessageBeginWithName: @"updateBirthday"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_updateLocation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  updateLocation_args * args = [[updateLocation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UpdateLocation_result * result = [[UpdateLocation_result alloc] init];
  [mService updateLocation: [args commArgs] userId: [args userId] districtCode: [args districtCode] district: [args district]];
  [outProtocol writeMessageBeginWithName: @"updateLocation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_setUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  setUserInfo_args * args = [[setUserInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SetUserInfo_result * result = [[SetUserInfo_result alloc] init];
  [result setSuccess: [mService setUserInfo: [args commArgs] userInfo: [args userInfo]]];
  [outProtocol writeMessageBeginWithName: @"setUserInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getUserInfo_args * args = [[getUserInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetUserInfo_result * result = [[GetUserInfo_result alloc] init];
  [result setSuccess: [mService getUserInfo: [args commArgs]]];
  [outProtocol writeMessageBeginWithName: @"getUserInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getWatchInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getWatchInfo_args * args = [[getWatchInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetWatchInfo_result * result = [[GetWatchInfo_result alloc] init];
  [result setSuccess: [mService getWatchInfo: [args commArgs] userID: [args userID]]];
  [outProtocol writeMessageBeginWithName: @"getWatchInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

