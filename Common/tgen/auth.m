/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "xkcm.h"

#import "auth.h"

@implementation LoginExtInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApnsDeviceToken: (NSString *) apnsDeviceToken
{
  self = [super init];
  __apnsDeviceToken = [apnsDeviceToken retain_stub];
  __apnsDeviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"apnsDeviceToken"])
  {
    __apnsDeviceToken = [[decoder decodeObjectForKey: @"apnsDeviceToken"] retain_stub];
    __apnsDeviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__apnsDeviceToken_isset)
  {
    [encoder encodeObject: __apnsDeviceToken forKey: @"apnsDeviceToken"];
  }
}

- (void) dealloc
{
  [__apnsDeviceToken release_stub];
  [super dealloc_stub];
}

- (NSString *) apnsDeviceToken {
  return [[__apnsDeviceToken retain_stub] autorelease_stub];
}

- (void) setApnsDeviceToken: (NSString *) apnsDeviceToken {
  [apnsDeviceToken retain_stub];
  [__apnsDeviceToken release_stub];
  __apnsDeviceToken = apnsDeviceToken;
  __apnsDeviceToken_isset = YES;
}

- (BOOL) apnsDeviceTokenIsSet {
  return __apnsDeviceToken_isset;
}

- (void) unsetApnsDeviceToken {
  [__apnsDeviceToken release_stub];
  __apnsDeviceToken = nil;
  __apnsDeviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApnsDeviceToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginExtInfo"];
  if (__apnsDeviceToken_isset) {
    if (__apnsDeviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"apnsDeviceToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __apnsDeviceToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginExtInfo("];
  [ms appendString: @"apnsDeviceToken:"];
  [ms appendFormat: @"\"%@\"", __apnsDeviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation OpenAccountInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOpenIDType: (int) openIDType uid: (NSString *) uid userNickName: (NSString *) userNickName token: (NSString *) token
{
  self = [super init];
  __openIDType = openIDType;
  __openIDType_isset = YES;
  __uid = [uid retain_stub];
  __uid_isset = YES;
  __userNickName = [userNickName retain_stub];
  __userNickName_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"openIDType"])
  {
    __openIDType = [decoder decodeIntForKey: @"openIDType"];
    __openIDType_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [[decoder decodeObjectForKey: @"uid"] retain_stub];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"userNickName"])
  {
    __userNickName = [[decoder decodeObjectForKey: @"userNickName"] retain_stub];
    __userNickName_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__openIDType_isset)
  {
    [encoder encodeInt: __openIDType forKey: @"openIDType"];
  }
  if (__uid_isset)
  {
    [encoder encodeObject: __uid forKey: @"uid"];
  }
  if (__userNickName_isset)
  {
    [encoder encodeObject: __userNickName forKey: @"userNickName"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (void) dealloc
{
  [__uid release_stub];
  [__userNickName release_stub];
  [__token release_stub];
  [super dealloc_stub];
}

- (int) openIDType {
  return __openIDType;
}

- (void) setOpenIDType: (int) openIDType {
  __openIDType = openIDType;
  __openIDType_isset = YES;
}

- (BOOL) openIDTypeIsSet {
  return __openIDType_isset;
}

- (void) unsetOpenIDType {
  __openIDType_isset = NO;
}

- (NSString *) uid {
  return [[__uid retain_stub] autorelease_stub];
}

- (void) setUid: (NSString *) uid {
  [uid retain_stub];
  [__uid release_stub];
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  [__uid release_stub];
  __uid = nil;
  __uid_isset = NO;
}

- (NSString *) userNickName {
  return [[__userNickName retain_stub] autorelease_stub];
}

- (void) setUserNickName: (NSString *) userNickName {
  [userNickName retain_stub];
  [__userNickName release_stub];
  __userNickName = userNickName;
  __userNickName_isset = YES;
}

- (BOOL) userNickNameIsSet {
  return __userNickName_isset;
}

- (void) unsetUserNickName {
  [__userNickName release_stub];
  __userNickName = nil;
  __userNickName_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setOpenIDType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserNickName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OpenAccountInfo"];
  if (__openIDType_isset) {
    [outProtocol writeFieldBeginWithName: @"openIDType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __openIDType];
    [outProtocol writeFieldEnd];
  }
  if (__uid_isset) {
    if (__uid != nil) {
      [outProtocol writeFieldBeginWithName: @"uid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __uid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userNickName_isset) {
    if (__userNickName != nil) {
      [outProtocol writeFieldBeginWithName: @"userNickName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userNickName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"OpenAccountInfo("];
  [ms appendString: @"openIDType:"];
  [ms appendFormat: @"%i", __openIDType];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"\"%@\"", __uid];
  [ms appendString: @",userNickName:"];
  [ms appendFormat: @"\"%@\"", __userNickName];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LogoutExtInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApnsDeviceToken: (NSString *) apnsDeviceToken
{
  self = [super init];
  __apnsDeviceToken = [apnsDeviceToken retain_stub];
  __apnsDeviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"apnsDeviceToken"])
  {
    __apnsDeviceToken = [[decoder decodeObjectForKey: @"apnsDeviceToken"] retain_stub];
    __apnsDeviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__apnsDeviceToken_isset)
  {
    [encoder encodeObject: __apnsDeviceToken forKey: @"apnsDeviceToken"];
  }
}

- (void) dealloc
{
  [__apnsDeviceToken release_stub];
  [super dealloc_stub];
}

- (NSString *) apnsDeviceToken {
  return [[__apnsDeviceToken retain_stub] autorelease_stub];
}

- (void) setApnsDeviceToken: (NSString *) apnsDeviceToken {
  [apnsDeviceToken retain_stub];
  [__apnsDeviceToken release_stub];
  __apnsDeviceToken = apnsDeviceToken;
  __apnsDeviceToken_isset = YES;
}

- (BOOL) apnsDeviceTokenIsSet {
  return __apnsDeviceToken_isset;
}

- (void) unsetApnsDeviceToken {
  [__apnsDeviceToken release_stub];
  __apnsDeviceToken = nil;
  __apnsDeviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApnsDeviceToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogoutExtInfo"];
  if (__apnsDeviceToken_isset) {
    if (__apnsDeviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"apnsDeviceToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __apnsDeviceToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LogoutExtInfo("];
  [ms appendString: @"apnsDeviceToken:"];
  [ms appendFormat: @"\"%@\"", __apnsDeviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthUserInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserId: (NSString *) userId userName: (NSString *) userName figureUrl: (NSString *) figureUrl bigImageURL: (NSString *) bigImageURL
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __figureUrl = [figureUrl retain_stub];
  __figureUrl_isset = YES;
  __bigImageURL = [bigImageURL retain_stub];
  __bigImageURL_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"figureUrl"])
  {
    __figureUrl = [[decoder decodeObjectForKey: @"figureUrl"] retain_stub];
    __figureUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"bigImageURL"])
  {
    __bigImageURL = [[decoder decodeObjectForKey: @"bigImageURL"] retain_stub];
    __bigImageURL_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__figureUrl_isset)
  {
    [encoder encodeObject: __figureUrl forKey: @"figureUrl"];
  }
  if (__bigImageURL_isset)
  {
    [encoder encodeObject: __bigImageURL forKey: @"bigImageURL"];
  }
}

- (void) dealloc
{
  [__userId release_stub];
  [__userName release_stub];
  [__figureUrl release_stub];
  [__bigImageURL release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) figureUrl {
  return [[__figureUrl retain_stub] autorelease_stub];
}

- (void) setFigureUrl: (NSString *) figureUrl {
  [figureUrl retain_stub];
  [__figureUrl release_stub];
  __figureUrl = figureUrl;
  __figureUrl_isset = YES;
}

- (BOOL) figureUrlIsSet {
  return __figureUrl_isset;
}

- (void) unsetFigureUrl {
  [__figureUrl release_stub];
  __figureUrl = nil;
  __figureUrl_isset = NO;
}

- (NSString *) bigImageURL {
  return [[__bigImageURL retain_stub] autorelease_stub];
}

- (void) setBigImageURL: (NSString *) bigImageURL {
  [bigImageURL retain_stub];
  [__bigImageURL release_stub];
  __bigImageURL = bigImageURL;
  __bigImageURL_isset = YES;
}

- (BOOL) bigImageURLIsSet {
  return __bigImageURL_isset;
}

- (void) unsetBigImageURL {
  [__bigImageURL release_stub];
  __bigImageURL = nil;
  __bigImageURL_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFigureUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBigImageURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthUserInfo"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__figureUrl_isset) {
    if (__figureUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"figureUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __figureUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bigImageURL_isset) {
    if (__bigImageURL != nil) {
      [outProtocol writeFieldBeginWithName: @"bigImageURL" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __bigImageURL];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthUserInfo("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",figureUrl:"];
  [ms appendFormat: @"\"%@\"", __figureUrl];
  [ms appendString: @",bigImageURL:"];
  [ms appendFormat: @"\"%@\"", __bigImageURL];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginResultExtInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCasTgt: (NSString *) casTgt
{
  self = [super init];
  __casTgt = [casTgt retain_stub];
  __casTgt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"casTgt"])
  {
    __casTgt = [[decoder decodeObjectForKey: @"casTgt"] retain_stub];
    __casTgt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__casTgt_isset)
  {
    [encoder encodeObject: __casTgt forKey: @"casTgt"];
  }
}

- (void) dealloc
{
  [__casTgt release_stub];
  [super dealloc_stub];
}

- (NSString *) casTgt {
  return [[__casTgt retain_stub] autorelease_stub];
}

- (void) setCasTgt: (NSString *) casTgt {
  [casTgt retain_stub];
  [__casTgt release_stub];
  __casTgt = casTgt;
  __casTgt_isset = YES;
}

- (BOOL) casTgtIsSet {
  return __casTgt_isset;
}

- (void) unsetCasTgt {
  [__casTgt release_stub];
  __casTgt = nil;
  __casTgt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCasTgt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginResultExtInfo"];
  if (__casTgt_isset) {
    if (__casTgt != nil) {
      [outProtocol writeFieldBeginWithName: @"casTgt" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __casTgt];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginResultExtInfo("];
  [ms appendString: @"casTgt:"];
  [ms appendFormat: @"\"%@\"", __casTgt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDigestAuthorizationRes: (DigestAuthorizationRes *) digestAuthorizationRes authUserInfo: (AuthUserInfo *) authUserInfo loginResultExtInfo: (LoginResultExtInfo *) loginResultExtInfo
{
  self = [super init];
  __digestAuthorizationRes = [digestAuthorizationRes retain_stub];
  __digestAuthorizationRes_isset = YES;
  __authUserInfo = [authUserInfo retain_stub];
  __authUserInfo_isset = YES;
  __loginResultExtInfo = [loginResultExtInfo retain_stub];
  __loginResultExtInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"digestAuthorizationRes"])
  {
    __digestAuthorizationRes = [[decoder decodeObjectForKey: @"digestAuthorizationRes"] retain_stub];
    __digestAuthorizationRes_isset = YES;
  }
  if ([decoder containsValueForKey: @"authUserInfo"])
  {
    __authUserInfo = [[decoder decodeObjectForKey: @"authUserInfo"] retain_stub];
    __authUserInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginResultExtInfo"])
  {
    __loginResultExtInfo = [[decoder decodeObjectForKey: @"loginResultExtInfo"] retain_stub];
    __loginResultExtInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__digestAuthorizationRes_isset)
  {
    [encoder encodeObject: __digestAuthorizationRes forKey: @"digestAuthorizationRes"];
  }
  if (__authUserInfo_isset)
  {
    [encoder encodeObject: __authUserInfo forKey: @"authUserInfo"];
  }
  if (__loginResultExtInfo_isset)
  {
    [encoder encodeObject: __loginResultExtInfo forKey: @"loginResultExtInfo"];
  }
}

- (void) dealloc
{
  [__digestAuthorizationRes release_stub];
  [__authUserInfo release_stub];
  [__loginResultExtInfo release_stub];
  [super dealloc_stub];
}

- (DigestAuthorizationRes *) digestAuthorizationRes {
  return [[__digestAuthorizationRes retain_stub] autorelease_stub];
}

- (void) setDigestAuthorizationRes: (DigestAuthorizationRes *) digestAuthorizationRes {
  [digestAuthorizationRes retain_stub];
  [__digestAuthorizationRes release_stub];
  __digestAuthorizationRes = digestAuthorizationRes;
  __digestAuthorizationRes_isset = YES;
}

- (BOOL) digestAuthorizationResIsSet {
  return __digestAuthorizationRes_isset;
}

- (void) unsetDigestAuthorizationRes {
  [__digestAuthorizationRes release_stub];
  __digestAuthorizationRes = nil;
  __digestAuthorizationRes_isset = NO;
}

- (AuthUserInfo *) authUserInfo {
  return [[__authUserInfo retain_stub] autorelease_stub];
}

- (void) setAuthUserInfo: (AuthUserInfo *) authUserInfo {
  [authUserInfo retain_stub];
  [__authUserInfo release_stub];
  __authUserInfo = authUserInfo;
  __authUserInfo_isset = YES;
}

- (BOOL) authUserInfoIsSet {
  return __authUserInfo_isset;
}

- (void) unsetAuthUserInfo {
  [__authUserInfo release_stub];
  __authUserInfo = nil;
  __authUserInfo_isset = NO;
}

- (LoginResultExtInfo *) loginResultExtInfo {
  return [[__loginResultExtInfo retain_stub] autorelease_stub];
}

- (void) setLoginResultExtInfo: (LoginResultExtInfo *) loginResultExtInfo {
  [loginResultExtInfo retain_stub];
  [__loginResultExtInfo release_stub];
  __loginResultExtInfo = loginResultExtInfo;
  __loginResultExtInfo_isset = YES;
}

- (BOOL) loginResultExtInfoIsSet {
  return __loginResultExtInfo_isset;
}

- (void) unsetLoginResultExtInfo {
  [__loginResultExtInfo release_stub];
  __loginResultExtInfo = nil;
  __loginResultExtInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DigestAuthorizationRes *fieldValue = [[DigestAuthorizationRes alloc] init];
          [fieldValue read: inProtocol];
          [self setDigestAuthorizationRes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AuthUserInfo *fieldValue = [[AuthUserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthUserInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          LoginResultExtInfo *fieldValue = [[LoginResultExtInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setLoginResultExtInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginResult"];
  if (__digestAuthorizationRes_isset) {
    if (__digestAuthorizationRes != nil) {
      [outProtocol writeFieldBeginWithName: @"digestAuthorizationRes" type: TType_STRUCT fieldID: 1];
      [__digestAuthorizationRes write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authUserInfo_isset) {
    if (__authUserInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"authUserInfo" type: TType_STRUCT fieldID: 2];
      [__authUserInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginResultExtInfo_isset) {
    if (__loginResultExtInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"loginResultExtInfo" type: TType_STRUCT fieldID: 3];
      [__loginResultExtInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginResult("];
  [ms appendString: @"digestAuthorizationRes:"];
  [ms appendFormat: @"%@", __digestAuthorizationRes];
  [ms appendString: @",authUserInfo:"];
  [ms appendFormat: @"%@", __authUserInfo];
  [ms appendString: @",loginResultExtInfo:"];
  [ms appendFormat: @"%@", __loginResultExtInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation authConstants
+ (void) initialize {
}
@end

@interface login_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __userAccount;
  NSString * __password;
  LoginExtInfo * __loginExtInfo;

  BOOL __commArgs_isset;
  BOOL __userAccount_isset;
  BOOL __password_isset;
  BOOL __loginExtInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=userAccount, setter=setUserAccount:) NSString * userAccount;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, retain, getter=loginExtInfo, setter=setLoginExtInfo:) LoginExtInfo * loginExtInfo;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password loginExtInfo: (LoginExtInfo *) loginExtInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) userAccount;
- (void) setUserAccount: (NSString *) userAccount;
#endif
- (BOOL) userAccountIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (LoginExtInfo *) loginExtInfo;
- (void) setLoginExtInfo: (LoginExtInfo *) loginExtInfo;
#endif
- (BOOL) loginExtInfoIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password loginExtInfo: (LoginExtInfo *) loginExtInfo
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __userAccount = [userAccount retain_stub];
  __userAccount_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __loginExtInfo = [loginExtInfo retain_stub];
  __loginExtInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"userAccount"])
  {
    __userAccount = [[decoder decodeObjectForKey: @"userAccount"] retain_stub];
    __userAccount_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginExtInfo"])
  {
    __loginExtInfo = [[decoder decodeObjectForKey: @"loginExtInfo"] retain_stub];
    __loginExtInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__userAccount_isset)
  {
    [encoder encodeObject: __userAccount forKey: @"userAccount"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__loginExtInfo_isset)
  {
    [encoder encodeObject: __loginExtInfo forKey: @"loginExtInfo"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__userAccount release_stub];
  [__password release_stub];
  [__loginExtInfo release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) userAccount {
  return [[__userAccount retain_stub] autorelease_stub];
}

- (void) setUserAccount: (NSString *) userAccount {
  [userAccount retain_stub];
  [__userAccount release_stub];
  __userAccount = userAccount;
  __userAccount_isset = YES;
}

- (BOOL) userAccountIsSet {
  return __userAccount_isset;
}

- (void) unsetUserAccount {
  [__userAccount release_stub];
  __userAccount = nil;
  __userAccount_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (LoginExtInfo *) loginExtInfo {
  return [[__loginExtInfo retain_stub] autorelease_stub];
}

- (void) setLoginExtInfo: (LoginExtInfo *) loginExtInfo {
  [loginExtInfo retain_stub];
  [__loginExtInfo release_stub];
  __loginExtInfo = loginExtInfo;
  __loginExtInfo_isset = YES;
}

- (BOOL) loginExtInfoIsSet {
  return __loginExtInfo_isset;
}

- (void) unsetLoginExtInfo {
  [__loginExtInfo release_stub];
  __loginExtInfo = nil;
  __loginExtInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserAccount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          LoginExtInfo *fieldValue = [[LoginExtInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setLoginExtInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userAccount_isset) {
    if (__userAccount != nil) {
      [outProtocol writeFieldBeginWithName: @"userAccount" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userAccount];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginExtInfo_isset) {
    if (__loginExtInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"loginExtInfo" type: TType_STRUCT fieldID: 4];
      [__loginExtInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",userAccount:"];
  [ms appendFormat: @"\"%@\"", __userAccount];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",loginExtInfo:"];
  [ms appendFormat: @"%@", __loginExtInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <NSCoding> {
  LoginResult * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResult * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResult *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (LoginResult *) success;
- (void) setSuccess: (LoginResult *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResult *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (LoginResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResult *fieldValue = [[LoginResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface loginWithOpendID_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  OpenAccountInfo * __openAccountInfo;
  LoginExtInfo * __loginExtInfo;

  BOOL __commArgs_isset;
  BOOL __openAccountInfo_isset;
  BOOL __loginExtInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=openAccountInfo, setter=setOpenAccountInfo:) OpenAccountInfo * openAccountInfo;
@property (nonatomic, retain, getter=loginExtInfo, setter=setLoginExtInfo:) LoginExtInfo * loginExtInfo;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs openAccountInfo: (OpenAccountInfo *) openAccountInfo loginExtInfo: (LoginExtInfo *) loginExtInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (OpenAccountInfo *) openAccountInfo;
- (void) setOpenAccountInfo: (OpenAccountInfo *) openAccountInfo;
#endif
- (BOOL) openAccountInfoIsSet;

#if !__has_feature(objc_arc)
- (LoginExtInfo *) loginExtInfo;
- (void) setLoginExtInfo: (LoginExtInfo *) loginExtInfo;
#endif
- (BOOL) loginExtInfoIsSet;

@end

@implementation loginWithOpendID_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs openAccountInfo: (OpenAccountInfo *) openAccountInfo loginExtInfo: (LoginExtInfo *) loginExtInfo
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __openAccountInfo = [openAccountInfo retain_stub];
  __openAccountInfo_isset = YES;
  __loginExtInfo = [loginExtInfo retain_stub];
  __loginExtInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"openAccountInfo"])
  {
    __openAccountInfo = [[decoder decodeObjectForKey: @"openAccountInfo"] retain_stub];
    __openAccountInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"loginExtInfo"])
  {
    __loginExtInfo = [[decoder decodeObjectForKey: @"loginExtInfo"] retain_stub];
    __loginExtInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__openAccountInfo_isset)
  {
    [encoder encodeObject: __openAccountInfo forKey: @"openAccountInfo"];
  }
  if (__loginExtInfo_isset)
  {
    [encoder encodeObject: __loginExtInfo forKey: @"loginExtInfo"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__openAccountInfo release_stub];
  [__loginExtInfo release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (OpenAccountInfo *) openAccountInfo {
  return [[__openAccountInfo retain_stub] autorelease_stub];
}

- (void) setOpenAccountInfo: (OpenAccountInfo *) openAccountInfo {
  [openAccountInfo retain_stub];
  [__openAccountInfo release_stub];
  __openAccountInfo = openAccountInfo;
  __openAccountInfo_isset = YES;
}

- (BOOL) openAccountInfoIsSet {
  return __openAccountInfo_isset;
}

- (void) unsetOpenAccountInfo {
  [__openAccountInfo release_stub];
  __openAccountInfo = nil;
  __openAccountInfo_isset = NO;
}

- (LoginExtInfo *) loginExtInfo {
  return [[__loginExtInfo retain_stub] autorelease_stub];
}

- (void) setLoginExtInfo: (LoginExtInfo *) loginExtInfo {
  [loginExtInfo retain_stub];
  [__loginExtInfo release_stub];
  __loginExtInfo = loginExtInfo;
  __loginExtInfo_isset = YES;
}

- (BOOL) loginExtInfoIsSet {
  return __loginExtInfo_isset;
}

- (void) unsetLoginExtInfo {
  [__loginExtInfo release_stub];
  __loginExtInfo = nil;
  __loginExtInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          OpenAccountInfo *fieldValue = [[OpenAccountInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setOpenAccountInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          LoginExtInfo *fieldValue = [[LoginExtInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setLoginExtInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginWithOpendID_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__openAccountInfo_isset) {
    if (__openAccountInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"openAccountInfo" type: TType_STRUCT fieldID: 2];
      [__openAccountInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__loginExtInfo_isset) {
    if (__loginExtInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"loginExtInfo" type: TType_STRUCT fieldID: 3];
      [__loginExtInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginWithOpendID_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",openAccountInfo:"];
  [ms appendFormat: @"%@", __openAccountInfo];
  [ms appendString: @",loginExtInfo:"];
  [ms appendFormat: @"%@", __loginExtInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LoginWithOpendID_result : NSObject <NSCoding> {
  LoginResult * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResult * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResult *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (LoginResult *) success;
- (void) setSuccess: (LoginResult *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation LoginWithOpendID_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResult *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (LoginResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResult *fieldValue = [[LoginResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginWithOpendID_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginWithOpendID_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface heartbeat_args : NSObject <NSCoding> {
  CommArgs * __commArgs;

  BOOL __commArgs_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

@end

@implementation heartbeat_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"heartbeat_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"heartbeat_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Heartbeat_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation Heartbeat_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Heartbeat_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Heartbeat_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  LogoutExtInfo * __logoutExtInfo;

  BOOL __commArgs_isset;
  BOOL __logoutExtInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=logoutExtInfo, setter=setLogoutExtInfo:) LogoutExtInfo * logoutExtInfo;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs logoutExtInfo: (LogoutExtInfo *) logoutExtInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (LogoutExtInfo *) logoutExtInfo;
- (void) setLogoutExtInfo: (LogoutExtInfo *) logoutExtInfo;
#endif
- (BOOL) logoutExtInfoIsSet;

@end

@implementation logout_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs logoutExtInfo: (LogoutExtInfo *) logoutExtInfo
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __logoutExtInfo = [logoutExtInfo retain_stub];
  __logoutExtInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"logoutExtInfo"])
  {
    __logoutExtInfo = [[decoder decodeObjectForKey: @"logoutExtInfo"] retain_stub];
    __logoutExtInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__logoutExtInfo_isset)
  {
    [encoder encodeObject: __logoutExtInfo forKey: @"logoutExtInfo"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__logoutExtInfo release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (LogoutExtInfo *) logoutExtInfo {
  return [[__logoutExtInfo retain_stub] autorelease_stub];
}

- (void) setLogoutExtInfo: (LogoutExtInfo *) logoutExtInfo {
  [logoutExtInfo retain_stub];
  [__logoutExtInfo release_stub];
  __logoutExtInfo = logoutExtInfo;
  __logoutExtInfo_isset = YES;
}

- (BOOL) logoutExtInfoIsSet {
  return __logoutExtInfo_isset;
}

- (void) unsetLogoutExtInfo {
  [__logoutExtInfo release_stub];
  __logoutExtInfo = nil;
  __logoutExtInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          LogoutExtInfo *fieldValue = [[LogoutExtInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setLogoutExtInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logoutExtInfo_isset) {
    if (__logoutExtInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"logoutExtInfo" type: TType_STRUCT fieldID: 2];
      [__logoutExtInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",logoutExtInfo:"];
  [ms appendFormat: @"%@", __logoutExtInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation Logout_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_login: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password loginExtInfo: (LoginExtInfo *) loginExtInfo
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (userAccount != nil)  {
    [outProtocol writeFieldBeginWithName: @"userAccount" type: TType_STRING fieldID: 2];
    [outProtocol writeString: userAccount];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (loginExtInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"loginExtInfo" type: TType_STRUCT fieldID: 4];
    [loginExtInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginResult *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (LoginResult *) login: (CommArgs *) commArgs userAccount: (NSString *) userAccount password: (NSString *) password loginExtInfo: (LoginExtInfo *) loginExtInfo
{
  [self send_login : commArgs userAccount: userAccount password: password loginExtInfo: loginExtInfo];
  return [self recv_login];
}

- (void) send_loginWithOpendID: (CommArgs *) commArgs openAccountInfo: (OpenAccountInfo *) openAccountInfo loginExtInfo: (LoginExtInfo *) loginExtInfo
{
  [outProtocol writeMessageBeginWithName: @"loginWithOpendID" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginWithOpendID_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (openAccountInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"openAccountInfo" type: TType_STRUCT fieldID: 2];
    [openAccountInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (loginExtInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"loginExtInfo" type: TType_STRUCT fieldID: 3];
    [loginExtInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginResult *) recv_loginWithOpendID
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LoginWithOpendID_result * result = [[[LoginWithOpendID_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginWithOpendID failed: unknown result"];
}

- (LoginResult *) loginWithOpendID: (CommArgs *) commArgs openAccountInfo: (OpenAccountInfo *) openAccountInfo loginExtInfo: (LoginExtInfo *) loginExtInfo
{
  [self send_loginWithOpendID : commArgs openAccountInfo: openAccountInfo loginExtInfo: loginExtInfo];
  return [self recv_loginWithOpendID];
}

- (void) send_heartbeat: (CommArgs *) commArgs
{
  [outProtocol writeMessageBeginWithName: @"heartbeat" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"heartbeat_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_heartbeat
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Heartbeat_result * result = [[[Heartbeat_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) heartbeat: (CommArgs *) commArgs
{
  [self send_heartbeat : commArgs];
  [self recv_heartbeat];
}

- (void) send_logout: (CommArgs *) commArgs logoutExtInfo: (LogoutExtInfo *) logoutExtInfo
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (logoutExtInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"logoutExtInfo" type: TType_STRUCT fieldID: 2];
    [logoutExtInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_logout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) logout: (CommArgs *) commArgs logoutExtInfo: (LogoutExtInfo *) logoutExtInfo
{
  [self send_logout : commArgs logoutExtInfo: logoutExtInfo];
  [self recv_logout];
}

@end

@implementation AuthServiceProcessor

- (id) initWithAuthService: (id <AuthService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_loginWithOpendID_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"loginWithOpendID"];
  }
  {
    SEL s = @selector(process_heartbeat_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"heartbeat"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  return self;
}

- (id<AuthService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args commArgs] userAccount: [args userAccount] password: [args password] loginExtInfo: [args loginExtInfo]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_loginWithOpendID_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  loginWithOpendID_args * args = [[loginWithOpendID_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  LoginWithOpendID_result * result = [[LoginWithOpendID_result alloc] init];
  [result setSuccess: [mService loginWithOpendID: [args commArgs] openAccountInfo: [args openAccountInfo] loginExtInfo: [args loginExtInfo]]];
  [outProtocol writeMessageBeginWithName: @"loginWithOpendID"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_heartbeat_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  heartbeat_args * args = [[heartbeat_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Heartbeat_result * result = [[Heartbeat_result alloc] init];
  [mService heartbeat: [args commArgs]];
  [outProtocol writeMessageBeginWithName: @"heartbeat"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Logout_result * result = [[Logout_result alloc] init];
  [mService logout: [args commArgs] logoutExtInfo: [args logoutExtInfo]];
  [outProtocol writeMessageBeginWithName: @"logout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

