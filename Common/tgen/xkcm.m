/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "xkcm.h"

@implementation TerminalInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceType: (int) deviceType deviceId: (NSString *) deviceId OsVersion: (NSString *) OsVersion
{
  self = [super init];
  __deviceType = deviceType;
  __deviceType_isset = YES;
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  __OsVersion = [OsVersion retain_stub];
  __OsVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceType"])
  {
    __deviceType = [decoder decodeIntForKey: @"deviceType"];
    __deviceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"OsVersion"])
  {
    __OsVersion = [[decoder decodeObjectForKey: @"OsVersion"] retain_stub];
    __OsVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceType_isset)
  {
    [encoder encodeInt: __deviceType forKey: @"deviceType"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
  if (__OsVersion_isset)
  {
    [encoder encodeObject: __OsVersion forKey: @"OsVersion"];
  }
}

- (void) dealloc
{
  [__deviceId release_stub];
  [__OsVersion release_stub];
  [super dealloc_stub];
}

- (int) deviceType {
  return __deviceType;
}

- (void) setDeviceType: (int) deviceType {
  __deviceType = deviceType;
  __deviceType_isset = YES;
}

- (BOOL) deviceTypeIsSet {
  return __deviceType_isset;
}

- (void) unsetDeviceType {
  __deviceType_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (NSString *) OsVersion {
  return [[__OsVersion retain_stub] autorelease_stub];
}

- (void) setOsVersion: (NSString *) OsVersion {
  [OsVersion retain_stub];
  [__OsVersion release_stub];
  __OsVersion = OsVersion;
  __OsVersion_isset = YES;
}

- (BOOL) OsVersionIsSet {
  return __OsVersion_isset;
}

- (void) unsetOsVersion {
  [__OsVersion release_stub];
  __OsVersion = nil;
  __OsVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setDeviceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOsVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TerminalInfo"];
  if (__deviceType_isset) {
    [outProtocol writeFieldBeginWithName: @"deviceType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __deviceType];
    [outProtocol writeFieldEnd];
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__OsVersion_isset) {
    if (__OsVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"OsVersion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __OsVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TerminalInfo("];
  [ms appendString: @"deviceType:"];
  [ms appendFormat: @"%i", __deviceType];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @",OsVersion:"];
  [ms appendFormat: @"\"%@\"", __OsVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppId: (NSString *) appId appVersion: (NSString *) appVersion
{
  self = [super init];
  __appId = [appId retain_stub];
  __appId_isset = YES;
  __appVersion = [appVersion retain_stub];
  __appVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appId"])
  {
    __appId = [[decoder decodeObjectForKey: @"appId"] retain_stub];
    __appId_isset = YES;
  }
  if ([decoder containsValueForKey: @"appVersion"])
  {
    __appVersion = [[decoder decodeObjectForKey: @"appVersion"] retain_stub];
    __appVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appId_isset)
  {
    [encoder encodeObject: __appId forKey: @"appId"];
  }
  if (__appVersion_isset)
  {
    [encoder encodeObject: __appVersion forKey: @"appVersion"];
  }
}

- (void) dealloc
{
  [__appId release_stub];
  [__appVersion release_stub];
  [super dealloc_stub];
}

- (NSString *) appId {
  return [[__appId retain_stub] autorelease_stub];
}

- (void) setAppId: (NSString *) appId {
  [appId retain_stub];
  [__appId release_stub];
  __appId = appId;
  __appId_isset = YES;
}

- (BOOL) appIdIsSet {
  return __appId_isset;
}

- (void) unsetAppId {
  [__appId release_stub];
  __appId = nil;
  __appId_isset = NO;
}

- (NSString *) appVersion {
  return [[__appVersion retain_stub] autorelease_stub];
}

- (void) setAppVersion: (NSString *) appVersion {
  [appVersion retain_stub];
  [__appVersion release_stub];
  __appVersion = appVersion;
  __appVersion_isset = YES;
}

- (BOOL) appVersionIsSet {
  return __appVersion_isset;
}

- (void) unsetAppVersion {
  [__appVersion release_stub];
  __appVersion = nil;
  __appVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppInfo"];
  if (__appId_isset) {
    if (__appId != nil) {
      [outProtocol writeFieldBeginWithName: @"appId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __appId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appVersion_isset) {
    if (__appVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"appVersion" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __appVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppInfo("];
  [ms appendString: @"appId:"];
  [ms appendFormat: @"\"%@\"", __appId];
  [ms appendString: @",appVersion:"];
  [ms appendFormat: @"\"%@\"", __appVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation I18nInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegion: (int) region language: (int) language
{
  self = [super init];
  __region = region;
  __region_isset = YES;
  __language = language;
  __language_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"region"])
  {
    __region = [decoder decodeIntForKey: @"region"];
    __region_isset = YES;
  }
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [decoder decodeIntForKey: @"language"];
    __language_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__region_isset)
  {
    [encoder encodeInt: __region forKey: @"region"];
  }
  if (__language_isset)
  {
    [encoder encodeInt: __language forKey: @"language"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) region {
  return __region;
}

- (void) setRegion: (int) region {
  __region = region;
  __region_isset = YES;
}

- (BOOL) regionIsSet {
  return __region_isset;
}

- (void) unsetRegion {
  __region_isset = NO;
}

- (int) language {
  return __language;
}

- (void) setLanguage: (int) language {
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  __language_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setRegion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"I18nInfo"];
  if (__region_isset) {
    [outProtocol writeFieldBeginWithName: @"region" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __region];
    [outProtocol writeFieldEnd];
  }
  if (__language_isset) {
    [outProtocol writeFieldBeginWithName: @"language" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __language];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"I18nInfo("];
  [ms appendString: @"region:"];
  [ms appendFormat: @"%i", __region];
  [ms appendString: @",language:"];
  [ms appendFormat: @"%i", __language];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DigestAuthenticationReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClientId: (NSString *) clientId clientCount: (int64_t) clientCount clientRandom: (NSString *) clientRandom accessToken: (NSString *) accessToken
{
  self = [super init];
  __clientId = [clientId retain_stub];
  __clientId_isset = YES;
  __clientCount = clientCount;
  __clientCount_isset = YES;
  __clientRandom = [clientRandom retain_stub];
  __clientRandom_isset = YES;
  __accessToken = [accessToken retain_stub];
  __accessToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clientId"])
  {
    __clientId = [[decoder decodeObjectForKey: @"clientId"] retain_stub];
    __clientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientCount"])
  {
    __clientCount = [decoder decodeInt64ForKey: @"clientCount"];
    __clientCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientRandom"])
  {
    __clientRandom = [[decoder decodeObjectForKey: @"clientRandom"] retain_stub];
    __clientRandom_isset = YES;
  }
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain_stub];
    __accessToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clientId_isset)
  {
    [encoder encodeObject: __clientId forKey: @"clientId"];
  }
  if (__clientCount_isset)
  {
    [encoder encodeInt64: __clientCount forKey: @"clientCount"];
  }
  if (__clientRandom_isset)
  {
    [encoder encodeObject: __clientRandom forKey: @"clientRandom"];
  }
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
}

- (void) dealloc
{
  [__clientId release_stub];
  [__clientRandom release_stub];
  [__accessToken release_stub];
  [super dealloc_stub];
}

- (NSString *) clientId {
  return [[__clientId retain_stub] autorelease_stub];
}

- (void) setClientId: (NSString *) clientId {
  [clientId retain_stub];
  [__clientId release_stub];
  __clientId = clientId;
  __clientId_isset = YES;
}

- (BOOL) clientIdIsSet {
  return __clientId_isset;
}

- (void) unsetClientId {
  [__clientId release_stub];
  __clientId = nil;
  __clientId_isset = NO;
}

- (int64_t) clientCount {
  return __clientCount;
}

- (void) setClientCount: (int64_t) clientCount {
  __clientCount = clientCount;
  __clientCount_isset = YES;
}

- (BOOL) clientCountIsSet {
  return __clientCount_isset;
}

- (void) unsetClientCount {
  __clientCount_isset = NO;
}

- (NSString *) clientRandom {
  return [[__clientRandom retain_stub] autorelease_stub];
}

- (void) setClientRandom: (NSString *) clientRandom {
  [clientRandom retain_stub];
  [__clientRandom release_stub];
  __clientRandom = clientRandom;
  __clientRandom_isset = YES;
}

- (BOOL) clientRandomIsSet {
  return __clientRandom_isset;
}

- (void) unsetClientRandom {
  [__clientRandom release_stub];
  __clientRandom = nil;
  __clientRandom_isset = NO;
}

- (NSString *) accessToken {
  return [[__accessToken retain_stub] autorelease_stub];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain_stub];
  [__accessToken release_stub];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release_stub];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setClientCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientRandom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DigestAuthenticationReq"];
  if (__clientId_isset) {
    if (__clientId != nil) {
      [outProtocol writeFieldBeginWithName: @"clientId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientCount_isset) {
    [outProtocol writeFieldBeginWithName: @"clientCount" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __clientCount];
    [outProtocol writeFieldEnd];
  }
  if (__clientRandom_isset) {
    if (__clientRandom != nil) {
      [outProtocol writeFieldBeginWithName: @"clientRandom" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __clientRandom];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DigestAuthenticationReq("];
  [ms appendString: @"clientId:"];
  [ms appendFormat: @"\"%@\"", __clientId];
  [ms appendString: @",clientCount:"];
  [ms appendFormat: @"%qi", __clientCount];
  [ms appendString: @",clientRandom:"];
  [ms appendFormat: @"\"%@\"", __clientRandom];
  [ms appendString: @",accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CommArgs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTerminalInfo: (TerminalInfo *) terminalInfo appInfo: (AppInfo *) appInfo userId: (NSString *) userId i18nInfo: (I18nInfo *) i18nInfo authMode: (int) authMode digestAuthenticationReq: (DigestAuthenticationReq *) digestAuthenticationReq checkVersion: (BOOL) checkVersion
{
  self = [super init];
  __terminalInfo = [terminalInfo retain_stub];
  __terminalInfo_isset = YES;
  __appInfo = [appInfo retain_stub];
  __appInfo_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __i18nInfo = [i18nInfo retain_stub];
  __i18nInfo_isset = YES;
  __authMode = authMode;
  __authMode_isset = YES;
  __digestAuthenticationReq = [digestAuthenticationReq retain_stub];
  __digestAuthenticationReq_isset = YES;
  __checkVersion = checkVersion;
  __checkVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"terminalInfo"])
  {
    __terminalInfo = [[decoder decodeObjectForKey: @"terminalInfo"] retain_stub];
    __terminalInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"appInfo"])
  {
    __appInfo = [[decoder decodeObjectForKey: @"appInfo"] retain_stub];
    __appInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"i18nInfo"])
  {
    __i18nInfo = [[decoder decodeObjectForKey: @"i18nInfo"] retain_stub];
    __i18nInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"authMode"])
  {
    __authMode = [decoder decodeIntForKey: @"authMode"];
    __authMode_isset = YES;
  }
  if ([decoder containsValueForKey: @"digestAuthenticationReq"])
  {
    __digestAuthenticationReq = [[decoder decodeObjectForKey: @"digestAuthenticationReq"] retain_stub];
    __digestAuthenticationReq_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkVersion"])
  {
    __checkVersion = [decoder decodeBoolForKey: @"checkVersion"];
    __checkVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__terminalInfo_isset)
  {
    [encoder encodeObject: __terminalInfo forKey: @"terminalInfo"];
  }
  if (__appInfo_isset)
  {
    [encoder encodeObject: __appInfo forKey: @"appInfo"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__i18nInfo_isset)
  {
    [encoder encodeObject: __i18nInfo forKey: @"i18nInfo"];
  }
  if (__authMode_isset)
  {
    [encoder encodeInt: __authMode forKey: @"authMode"];
  }
  if (__digestAuthenticationReq_isset)
  {
    [encoder encodeObject: __digestAuthenticationReq forKey: @"digestAuthenticationReq"];
  }
  if (__checkVersion_isset)
  {
    [encoder encodeBool: __checkVersion forKey: @"checkVersion"];
  }
}

- (void) dealloc
{
  [__terminalInfo release_stub];
  [__appInfo release_stub];
  [__userId release_stub];
  [__i18nInfo release_stub];
  [__digestAuthenticationReq release_stub];
  [super dealloc_stub];
}

- (TerminalInfo *) terminalInfo {
  return [[__terminalInfo retain_stub] autorelease_stub];
}

- (void) setTerminalInfo: (TerminalInfo *) terminalInfo {
  [terminalInfo retain_stub];
  [__terminalInfo release_stub];
  __terminalInfo = terminalInfo;
  __terminalInfo_isset = YES;
}

- (BOOL) terminalInfoIsSet {
  return __terminalInfo_isset;
}

- (void) unsetTerminalInfo {
  [__terminalInfo release_stub];
  __terminalInfo = nil;
  __terminalInfo_isset = NO;
}

- (AppInfo *) appInfo {
  return [[__appInfo retain_stub] autorelease_stub];
}

- (void) setAppInfo: (AppInfo *) appInfo {
  [appInfo retain_stub];
  [__appInfo release_stub];
  __appInfo = appInfo;
  __appInfo_isset = YES;
}

- (BOOL) appInfoIsSet {
  return __appInfo_isset;
}

- (void) unsetAppInfo {
  [__appInfo release_stub];
  __appInfo = nil;
  __appInfo_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (I18nInfo *) i18nInfo {
  return [[__i18nInfo retain_stub] autorelease_stub];
}

- (void) setI18nInfo: (I18nInfo *) i18nInfo {
  [i18nInfo retain_stub];
  [__i18nInfo release_stub];
  __i18nInfo = i18nInfo;
  __i18nInfo_isset = YES;
}

- (BOOL) i18nInfoIsSet {
  return __i18nInfo_isset;
}

- (void) unsetI18nInfo {
  [__i18nInfo release_stub];
  __i18nInfo = nil;
  __i18nInfo_isset = NO;
}

- (int) authMode {
  return __authMode;
}

- (void) setAuthMode: (int) authMode {
  __authMode = authMode;
  __authMode_isset = YES;
}

- (BOOL) authModeIsSet {
  return __authMode_isset;
}

- (void) unsetAuthMode {
  __authMode_isset = NO;
}

- (DigestAuthenticationReq *) digestAuthenticationReq {
  return [[__digestAuthenticationReq retain_stub] autorelease_stub];
}

- (void) setDigestAuthenticationReq: (DigestAuthenticationReq *) digestAuthenticationReq {
  [digestAuthenticationReq retain_stub];
  [__digestAuthenticationReq release_stub];
  __digestAuthenticationReq = digestAuthenticationReq;
  __digestAuthenticationReq_isset = YES;
}

- (BOOL) digestAuthenticationReqIsSet {
  return __digestAuthenticationReq_isset;
}

- (void) unsetDigestAuthenticationReq {
  [__digestAuthenticationReq release_stub];
  __digestAuthenticationReq = nil;
  __digestAuthenticationReq_isset = NO;
}

- (BOOL) checkVersion {
  return __checkVersion;
}

- (void) setCheckVersion: (BOOL) checkVersion {
  __checkVersion = checkVersion;
  __checkVersion_isset = YES;
}

- (BOOL) checkVersionIsSet {
  return __checkVersion_isset;
}

- (void) unsetCheckVersion {
  __checkVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TerminalInfo *fieldValue = [[TerminalInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setTerminalInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AppInfo *fieldValue = [[AppInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setAppInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          I18nInfo *fieldValue = [[I18nInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setI18nInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setAuthMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          DigestAuthenticationReq *fieldValue = [[DigestAuthenticationReq alloc] init];
          [fieldValue read: inProtocol];
          [self setDigestAuthenticationReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCheckVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CommArgs"];
  if (__terminalInfo_isset) {
    if (__terminalInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"terminalInfo" type: TType_STRUCT fieldID: 1];
      [__terminalInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appInfo_isset) {
    if (__appInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"appInfo" type: TType_STRUCT fieldID: 2];
      [__appInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__i18nInfo_isset) {
    if (__i18nInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"i18nInfo" type: TType_STRUCT fieldID: 4];
      [__i18nInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authMode_isset) {
    [outProtocol writeFieldBeginWithName: @"authMode" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __authMode];
    [outProtocol writeFieldEnd];
  }
  if (__digestAuthenticationReq_isset) {
    if (__digestAuthenticationReq != nil) {
      [outProtocol writeFieldBeginWithName: @"digestAuthenticationReq" type: TType_STRUCT fieldID: 6];
      [__digestAuthenticationReq write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkVersion_isset) {
    [outProtocol writeFieldBeginWithName: @"checkVersion" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __checkVersion];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CommArgs("];
  [ms appendString: @"terminalInfo:"];
  [ms appendFormat: @"%@", __terminalInfo];
  [ms appendString: @",appInfo:"];
  [ms appendFormat: @"%@", __appInfo];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",i18nInfo:"];
  [ms appendFormat: @"%@", __i18nInfo];
  [ms appendString: @",authMode:"];
  [ms appendFormat: @"%i", __authMode];
  [ms appendString: @",digestAuthenticationReq:"];
  [ms appendFormat: @"%@", __digestAuthenticationReq];
  [ms appendString: @",checkVersion:"];
  [ms appendFormat: @"%i", __checkVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DigestAuthorizationRes

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClientId: (NSString *) clientId initialToken: (NSString *) initialToken initialCount: (int32_t) initialCount resSign: (NSString *) resSign authTtl: (int32_t) authTtl
{
  self = [super init];
  __clientId = [clientId retain_stub];
  __clientId_isset = YES;
  __initialToken = [initialToken retain_stub];
  __initialToken_isset = YES;
  __initialCount = initialCount;
  __initialCount_isset = YES;
  __resSign = [resSign retain_stub];
  __resSign_isset = YES;
  __authTtl = authTtl;
  __authTtl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clientId"])
  {
    __clientId = [[decoder decodeObjectForKey: @"clientId"] retain_stub];
    __clientId_isset = YES;
  }
  if ([decoder containsValueForKey: @"initialToken"])
  {
    __initialToken = [[decoder decodeObjectForKey: @"initialToken"] retain_stub];
    __initialToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"initialCount"])
  {
    __initialCount = [decoder decodeInt32ForKey: @"initialCount"];
    __initialCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"resSign"])
  {
    __resSign = [[decoder decodeObjectForKey: @"resSign"] retain_stub];
    __resSign_isset = YES;
  }
  if ([decoder containsValueForKey: @"authTtl"])
  {
    __authTtl = [decoder decodeInt32ForKey: @"authTtl"];
    __authTtl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clientId_isset)
  {
    [encoder encodeObject: __clientId forKey: @"clientId"];
  }
  if (__initialToken_isset)
  {
    [encoder encodeObject: __initialToken forKey: @"initialToken"];
  }
  if (__initialCount_isset)
  {
    [encoder encodeInt32: __initialCount forKey: @"initialCount"];
  }
  if (__resSign_isset)
  {
    [encoder encodeObject: __resSign forKey: @"resSign"];
  }
  if (__authTtl_isset)
  {
    [encoder encodeInt32: __authTtl forKey: @"authTtl"];
  }
}

- (void) dealloc
{
  [__clientId release_stub];
  [__initialToken release_stub];
  [__resSign release_stub];
  [super dealloc_stub];
}

- (NSString *) clientId {
  return [[__clientId retain_stub] autorelease_stub];
}

- (void) setClientId: (NSString *) clientId {
  [clientId retain_stub];
  [__clientId release_stub];
  __clientId = clientId;
  __clientId_isset = YES;
}

- (BOOL) clientIdIsSet {
  return __clientId_isset;
}

- (void) unsetClientId {
  [__clientId release_stub];
  __clientId = nil;
  __clientId_isset = NO;
}

- (NSString *) initialToken {
  return [[__initialToken retain_stub] autorelease_stub];
}

- (void) setInitialToken: (NSString *) initialToken {
  [initialToken retain_stub];
  [__initialToken release_stub];
  __initialToken = initialToken;
  __initialToken_isset = YES;
}

- (BOOL) initialTokenIsSet {
  return __initialToken_isset;
}

- (void) unsetInitialToken {
  [__initialToken release_stub];
  __initialToken = nil;
  __initialToken_isset = NO;
}

- (int32_t) initialCount {
  return __initialCount;
}

- (void) setInitialCount: (int32_t) initialCount {
  __initialCount = initialCount;
  __initialCount_isset = YES;
}

- (BOOL) initialCountIsSet {
  return __initialCount_isset;
}

- (void) unsetInitialCount {
  __initialCount_isset = NO;
}

- (NSString *) resSign {
  return [[__resSign retain_stub] autorelease_stub];
}

- (void) setResSign: (NSString *) resSign {
  [resSign retain_stub];
  [__resSign release_stub];
  __resSign = resSign;
  __resSign_isset = YES;
}

- (BOOL) resSignIsSet {
  return __resSign_isset;
}

- (void) unsetResSign {
  [__resSign release_stub];
  __resSign = nil;
  __resSign_isset = NO;
}

- (int32_t) authTtl {
  return __authTtl;
}

- (void) setAuthTtl: (int32_t) authTtl {
  __authTtl = authTtl;
  __authTtl_isset = YES;
}

- (BOOL) authTtlIsSet {
  return __authTtl_isset;
}

- (void) unsetAuthTtl {
  __authTtl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInitialToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setInitialCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResSign: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAuthTtl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DigestAuthorizationRes"];
  if (__clientId_isset) {
    if (__clientId != nil) {
      [outProtocol writeFieldBeginWithName: @"clientId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clientId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__initialToken_isset) {
    if (__initialToken != nil) {
      [outProtocol writeFieldBeginWithName: @"initialToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __initialToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__initialCount_isset) {
    [outProtocol writeFieldBeginWithName: @"initialCount" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __initialCount];
    [outProtocol writeFieldEnd];
  }
  if (__resSign_isset) {
    if (__resSign != nil) {
      [outProtocol writeFieldBeginWithName: @"resSign" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __resSign];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authTtl_isset) {
    [outProtocol writeFieldBeginWithName: @"authTtl" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __authTtl];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DigestAuthorizationRes("];
  [ms appendString: @"clientId:"];
  [ms appendFormat: @"\"%@\"", __clientId];
  [ms appendString: @",initialToken:"];
  [ms appendFormat: @"\"%@\"", __initialToken];
  [ms appendString: @",initialCount:"];
  [ms appendFormat: @"%i", __initialCount];
  [ms appendString: @",resSign:"];
  [ms appendFormat: @"\"%@\"", __resSign];
  [ms appendString: @",authTtl:"];
  [ms appendFormat: @"%i", __authTtl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReturnMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIsSucceed: (BOOL) isSucceed message: (NSString *) message
{
  self = [super init];
  __isSucceed = isSucceed;
  __isSucceed_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"isSucceed"])
  {
    __isSucceed = [decoder decodeBoolForKey: @"isSucceed"];
    __isSucceed_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__isSucceed_isset)
  {
    [encoder encodeBool: __isSucceed forKey: @"isSucceed"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (BOOL) isSucceed {
  return __isSucceed;
}

- (void) setIsSucceed: (BOOL) isSucceed {
  __isSucceed = isSucceed;
  __isSucceed_isset = YES;
}

- (BOOL) isSucceedIsSet {
  return __isSucceed_isset;
}

- (void) unsetIsSucceed {
  __isSucceed_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsSucceed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReturnMessage"];
  if (__isSucceed_isset) {
    [outProtocol writeFieldBeginWithName: @"isSucceed" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __isSucceed];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReturnMessage("];
  [ms appendString: @"isSucceed:"];
  [ms appendFormat: @"%i", __isSucceed];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BizException

- (id) init
{
  return [super initWithName: @"BizException" reason: @"unknown" userInfo: nil];
}

- (id) initWithCode: (int32_t) code message: (NSString *) message
{
  self = [self init];
  __code = code;
  __code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt32ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__code_isset)
  {
    [encoder encodeInt32: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) code {
  return __code;
}

- (void) setCode: (int32_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BizException"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BizException("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthException

- (id) init
{
  return [super initWithName: @"AuthException" reason: @"unknown" userInfo: nil];
}

- (id) initWithCode: (int32_t) code message: (NSString *) message
{
  self = [self init];
  __code = code;
  __code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt32ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__code_isset)
  {
    [encoder encodeInt32: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) code {
  return __code;
}

- (void) setCode: (int32_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthException"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthException("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VersionException

- (id) init
{
  return [super initWithName: @"VersionException" reason: @"unknown" userInfo: nil];
}

- (id) initWithCode: (int32_t) code message: (NSString *) message
{
  self = [self init];
  __code = code;
  __code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt32ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__code_isset)
  {
    [encoder encodeInt32: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) code {
  return __code;
}

- (void) setCode: (int32_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VersionException"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VersionException("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation xkcmConstants
+ (void) initialize {
}
@end

