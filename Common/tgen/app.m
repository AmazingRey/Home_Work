/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "xkcm.h"

#import "app.h"

@implementation VersionInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCurrentStatus: (int) currentStatus currentMessage: (NSString *) currentMessage recommendedVersion: (NSString *) recommendedVersion linkUrl: (NSString *) linkUrl
{
  self = [super init];
  __currentStatus = currentStatus;
  __currentStatus_isset = YES;
  __currentMessage = [currentMessage retain_stub];
  __currentMessage_isset = YES;
  __recommendedVersion = [recommendedVersion retain_stub];
  __recommendedVersion_isset = YES;
  __linkUrl = [linkUrl retain_stub];
  __linkUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"currentStatus"])
  {
    __currentStatus = [decoder decodeIntForKey: @"currentStatus"];
    __currentStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentMessage"])
  {
    __currentMessage = [[decoder decodeObjectForKey: @"currentMessage"] retain_stub];
    __currentMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"recommendedVersion"])
  {
    __recommendedVersion = [[decoder decodeObjectForKey: @"recommendedVersion"] retain_stub];
    __recommendedVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkUrl"])
  {
    __linkUrl = [[decoder decodeObjectForKey: @"linkUrl"] retain_stub];
    __linkUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__currentStatus_isset)
  {
    [encoder encodeInt: __currentStatus forKey: @"currentStatus"];
  }
  if (__currentMessage_isset)
  {
    [encoder encodeObject: __currentMessage forKey: @"currentMessage"];
  }
  if (__recommendedVersion_isset)
  {
    [encoder encodeObject: __recommendedVersion forKey: @"recommendedVersion"];
  }
  if (__linkUrl_isset)
  {
    [encoder encodeObject: __linkUrl forKey: @"linkUrl"];
  }
}

- (void) dealloc
{
  [__currentMessage release_stub];
  [__recommendedVersion release_stub];
  [__linkUrl release_stub];
  [super dealloc_stub];
}

- (int) currentStatus {
  return __currentStatus;
}

- (void) setCurrentStatus: (int) currentStatus {
  __currentStatus = currentStatus;
  __currentStatus_isset = YES;
}

- (BOOL) currentStatusIsSet {
  return __currentStatus_isset;
}

- (void) unsetCurrentStatus {
  __currentStatus_isset = NO;
}

- (NSString *) currentMessage {
  return [[__currentMessage retain_stub] autorelease_stub];
}

- (void) setCurrentMessage: (NSString *) currentMessage {
  [currentMessage retain_stub];
  [__currentMessage release_stub];
  __currentMessage = currentMessage;
  __currentMessage_isset = YES;
}

- (BOOL) currentMessageIsSet {
  return __currentMessage_isset;
}

- (void) unsetCurrentMessage {
  [__currentMessage release_stub];
  __currentMessage = nil;
  __currentMessage_isset = NO;
}

- (NSString *) recommendedVersion {
  return [[__recommendedVersion retain_stub] autorelease_stub];
}

- (void) setRecommendedVersion: (NSString *) recommendedVersion {
  [recommendedVersion retain_stub];
  [__recommendedVersion release_stub];
  __recommendedVersion = recommendedVersion;
  __recommendedVersion_isset = YES;
}

- (BOOL) recommendedVersionIsSet {
  return __recommendedVersion_isset;
}

- (void) unsetRecommendedVersion {
  [__recommendedVersion release_stub];
  __recommendedVersion = nil;
  __recommendedVersion_isset = NO;
}

- (NSString *) linkUrl {
  return [[__linkUrl retain_stub] autorelease_stub];
}

- (void) setLinkUrl: (NSString *) linkUrl {
  [linkUrl retain_stub];
  [__linkUrl release_stub];
  __linkUrl = linkUrl;
  __linkUrl_isset = YES;
}

- (BOOL) linkUrlIsSet {
  return __linkUrl_isset;
}

- (void) unsetLinkUrl {
  [__linkUrl release_stub];
  __linkUrl = nil;
  __linkUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCurrentStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCurrentMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecommendedVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VersionInfo"];
  if (__currentStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"currentStatus" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __currentStatus];
    [outProtocol writeFieldEnd];
  }
  if (__currentMessage_isset) {
    if (__currentMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"currentMessage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __currentMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recommendedVersion_isset) {
    if (__recommendedVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"recommendedVersion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __recommendedVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkUrl_isset) {
    if (__linkUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"linkUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __linkUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VersionInfo("];
  [ms appendString: @"currentStatus:"];
  [ms appendFormat: @"%i", __currentStatus];
  [ms appendString: @",currentMessage:"];
  [ms appendFormat: @"\"%@\"", __currentMessage];
  [ms appendString: @",recommendedVersion:"];
  [ms appendFormat: @"\"%@\"", __recommendedVersion];
  [ms appendString: @",linkUrl:"];
  [ms appendFormat: @"\"%@\"", __linkUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation appConstants
+ (void) initialize {
}
@end

@interface validateVersion_args : NSObject <NSCoding> {
  CommArgs * __commArgs;

  BOOL __commArgs_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

@end

@implementation validateVersion_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"validateVersion_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"validateVersion_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ValidateVersion_result : NSObject <NSCoding> {
  VersionInfo * __success;
  AuthException * __ae;
  BizException * __be;

  BOOL __success_isset;
  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) VersionInfo * success;
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithSuccess: (VersionInfo *) success ae: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (VersionInfo *) success;
- (void) setSuccess: (VersionInfo *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation ValidateVersion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (VersionInfo *) success ae: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (VersionInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (VersionInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          VersionInfo *fieldValue = [[VersionInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ValidateVersion_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ValidateVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface registerAPNSForIOS_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __deviceToken;

  BOOL __commArgs_isset;
  BOOL __deviceToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=deviceToken, setter=setDeviceToken:) NSString * deviceToken;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceToken;
- (void) setDeviceToken: (NSString *) deviceToken;
#endif
- (BOOL) deviceTokenIsSet;

@end

@implementation registerAPNSForIOS_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __deviceToken = [deviceToken retain_stub];
  __deviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceToken"])
  {
    __deviceToken = [[decoder decodeObjectForKey: @"deviceToken"] retain_stub];
    __deviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__deviceToken_isset)
  {
    [encoder encodeObject: __deviceToken forKey: @"deviceToken"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__deviceToken release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) deviceToken {
  return [[__deviceToken retain_stub] autorelease_stub];
}

- (void) setDeviceToken: (NSString *) deviceToken {
  [deviceToken retain_stub];
  [__deviceToken release_stub];
  __deviceToken = deviceToken;
  __deviceToken_isset = YES;
}

- (BOOL) deviceTokenIsSet {
  return __deviceToken_isset;
}

- (void) unsetDeviceToken {
  [__deviceToken release_stub];
  __deviceToken = nil;
  __deviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerAPNSForIOS_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceToken_isset) {
    if (__deviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deviceToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerAPNSForIOS_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",deviceToken:"];
  [ms appendFormat: @"\"%@\"", __deviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegisterAPNSForIOS_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation RegisterAPNSForIOS_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterAPNSForIOS_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterAPNSForIOS_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface cancelAPNSForIOS_args : NSObject <NSCoding> {
  CommArgs * __commArgs;
  NSString * __deviceToken;

  BOOL __commArgs_isset;
  BOOL __deviceToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=commArgs, setter=setCommArgs:) CommArgs * commArgs;
@property (nonatomic, retain, getter=deviceToken, setter=setDeviceToken:) NSString * deviceToken;
#endif

- (id) init;
- (id) initWithCommArgs: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CommArgs *) commArgs;
- (void) setCommArgs: (CommArgs *) commArgs;
#endif
- (BOOL) commArgsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) deviceToken;
- (void) setDeviceToken: (NSString *) deviceToken;
#endif
- (BOOL) deviceTokenIsSet;

@end

@implementation cancelAPNSForIOS_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommArgs: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken
{
  self = [super init];
  __commArgs = [commArgs retain_stub];
  __commArgs_isset = YES;
  __deviceToken = [deviceToken retain_stub];
  __deviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commArgs"])
  {
    __commArgs = [[decoder decodeObjectForKey: @"commArgs"] retain_stub];
    __commArgs_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceToken"])
  {
    __deviceToken = [[decoder decodeObjectForKey: @"deviceToken"] retain_stub];
    __deviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commArgs_isset)
  {
    [encoder encodeObject: __commArgs forKey: @"commArgs"];
  }
  if (__deviceToken_isset)
  {
    [encoder encodeObject: __deviceToken forKey: @"deviceToken"];
  }
}

- (void) dealloc
{
  [__commArgs release_stub];
  [__deviceToken release_stub];
  [super dealloc_stub];
}

- (CommArgs *) commArgs {
  return [[__commArgs retain_stub] autorelease_stub];
}

- (void) setCommArgs: (CommArgs *) commArgs {
  [commArgs retain_stub];
  [__commArgs release_stub];
  __commArgs = commArgs;
  __commArgs_isset = YES;
}

- (BOOL) commArgsIsSet {
  return __commArgs_isset;
}

- (void) unsetCommArgs {
  [__commArgs release_stub];
  __commArgs = nil;
  __commArgs_isset = NO;
}

- (NSString *) deviceToken {
  return [[__deviceToken retain_stub] autorelease_stub];
}

- (void) setDeviceToken: (NSString *) deviceToken {
  [deviceToken retain_stub];
  [__deviceToken release_stub];
  __deviceToken = deviceToken;
  __deviceToken_isset = YES;
}

- (BOOL) deviceTokenIsSet {
  return __deviceToken_isset;
}

- (void) unsetDeviceToken {
  [__deviceToken release_stub];
  __deviceToken = nil;
  __deviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CommArgs *fieldValue = [[CommArgs alloc] init];
          [fieldValue read: inProtocol];
          [self setCommArgs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"cancelAPNSForIOS_args"];
  if (__commArgs_isset) {
    if (__commArgs != nil) {
      [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
      [__commArgs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceToken_isset) {
    if (__deviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deviceToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"cancelAPNSForIOS_args("];
  [ms appendString: @"commArgs:"];
  [ms appendFormat: @"%@", __commArgs];
  [ms appendString: @",deviceToken:"];
  [ms appendFormat: @"\"%@\"", __deviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CancelAPNSForIOS_result : NSObject <NSCoding> {
  AuthException * __ae;
  BizException * __be;

  BOOL __ae_isset;
  BOOL __be_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ae, setter=setAe:) AuthException * ae;
@property (nonatomic, retain, getter=be, setter=setBe:) BizException * be;
#endif

- (id) init;
- (id) initWithAe: (AuthException *) ae be: (BizException *) be;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (AuthException *) ae;
- (void) setAe: (AuthException *) ae;
#endif
- (BOOL) aeIsSet;

#if !__has_feature(objc_arc)
- (BizException *) be;
- (void) setBe: (BizException *) be;
#endif
- (BOOL) beIsSet;

@end

@implementation CancelAPNSForIOS_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAe: (AuthException *) ae be: (BizException *) be
{
  self = [super init];
  __ae = [ae retain_stub];
  __ae_isset = YES;
  __be = [be retain_stub];
  __be_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ae"])
  {
    __ae = [[decoder decodeObjectForKey: @"ae"] retain_stub];
    __ae_isset = YES;
  }
  if ([decoder containsValueForKey: @"be"])
  {
    __be = [[decoder decodeObjectForKey: @"be"] retain_stub];
    __be_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ae_isset)
  {
    [encoder encodeObject: __ae forKey: @"ae"];
  }
  if (__be_isset)
  {
    [encoder encodeObject: __be forKey: @"be"];
  }
}

- (void) dealloc
{
  [__ae release_stub];
  [__be release_stub];
  [super dealloc_stub];
}

- (AuthException *) ae {
  return [[__ae retain_stub] autorelease_stub];
}

- (void) setAe: (AuthException *) ae {
  [ae retain_stub];
  [__ae release_stub];
  __ae = ae;
  __ae_isset = YES;
}

- (BOOL) aeIsSet {
  return __ae_isset;
}

- (void) unsetAe {
  [__ae release_stub];
  __ae = nil;
  __ae_isset = NO;
}

- (BizException *) be {
  return [[__be retain_stub] autorelease_stub];
}

- (void) setBe: (BizException *) be {
  [be retain_stub];
  [__be release_stub];
  __be = be;
  __be_isset = YES;
}

- (BOOL) beIsSet {
  return __be_isset;
}

- (void) unsetBe {
  [__be release_stub];
  __be = nil;
  __be_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthException *fieldValue = [[AuthException alloc] init];
          [fieldValue read: inProtocol];
          [self setAe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BizException *fieldValue = [[BizException alloc] init];
          [fieldValue read: inProtocol];
          [self setBe: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CancelAPNSForIOS_result"];

  if (__ae_isset) {
    if (__ae != nil) {
      [outProtocol writeFieldBeginWithName: @"ae" type: TType_STRUCT fieldID: 1];
      [__ae write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__be_isset) {
    if (__be != nil) {
      [outProtocol writeFieldBeginWithName: @"be" type: TType_STRUCT fieldID: 2];
      [__be write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CancelAPNSForIOS_result("];
  [ms appendString: @"ae:"];
  [ms appendFormat: @"%@", __ae];
  [ms appendString: @",be:"];
  [ms appendFormat: @"%@", __be];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_validateVersion: (CommArgs *) commArgs
{
  [outProtocol writeMessageBeginWithName: @"validateVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"validateVersion_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (VersionInfo *) recv_validateVersion
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ValidateVersion_result * result = [[[ValidateVersion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"validateVersion failed: unknown result"];
}

- (VersionInfo *) validateVersion: (CommArgs *) commArgs
{
  [self send_validateVersion : commArgs];
  return [self recv_validateVersion];
}

- (void) send_registerAPNSForIOS: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken
{
  [outProtocol writeMessageBeginWithName: @"registerAPNSForIOS" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerAPNSForIOS_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (deviceToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 2];
    [outProtocol writeString: deviceToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_registerAPNSForIOS
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RegisterAPNSForIOS_result * result = [[[RegisterAPNSForIOS_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) registerAPNSForIOS: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken
{
  [self send_registerAPNSForIOS : commArgs deviceToken: deviceToken];
  [self recv_registerAPNSForIOS];
}

- (void) send_cancelAPNSForIOS: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken
{
  [outProtocol writeMessageBeginWithName: @"cancelAPNSForIOS" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"cancelAPNSForIOS_args"];
  if (commArgs != nil)  {
    [outProtocol writeFieldBeginWithName: @"commArgs" type: TType_STRUCT fieldID: 1];
    [commArgs write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (deviceToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"deviceToken" type: TType_STRING fieldID: 2];
    [outProtocol writeString: deviceToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_cancelAPNSForIOS
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CancelAPNSForIOS_result * result = [[[CancelAPNSForIOS_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result aeIsSet]) {
    @throw [result ae];
  }
  if ([result beIsSet]) {
    @throw [result be];
  }
  return;
}

- (void) cancelAPNSForIOS: (CommArgs *) commArgs deviceToken: (NSString *) deviceToken
{
  [self send_cancelAPNSForIOS : commArgs deviceToken: deviceToken];
  [self recv_cancelAPNSForIOS];
}

@end

@implementation AppServiceProcessor

- (id) initWithAppService: (id <AppService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_validateVersion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"validateVersion"];
  }
  {
    SEL s = @selector(process_registerAPNSForIOS_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerAPNSForIOS"];
  }
  {
    SEL s = @selector(process_cancelAPNSForIOS_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"cancelAPNSForIOS"];
  }
  return self;
}

- (id<AppService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_validateVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  validateVersion_args * args = [[validateVersion_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ValidateVersion_result * result = [[ValidateVersion_result alloc] init];
  [result setSuccess: [mService validateVersion: [args commArgs]]];
  [outProtocol writeMessageBeginWithName: @"validateVersion"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_registerAPNSForIOS_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  registerAPNSForIOS_args * args = [[registerAPNSForIOS_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RegisterAPNSForIOS_result * result = [[RegisterAPNSForIOS_result alloc] init];
  [mService registerAPNSForIOS: [args commArgs] deviceToken: [args deviceToken]];
  [outProtocol writeMessageBeginWithName: @"registerAPNSForIOS"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_cancelAPNSForIOS_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  cancelAPNSForIOS_args * args = [[cancelAPNSForIOS_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CancelAPNSForIOS_result * result = [[CancelAPNSForIOS_result alloc] init];
  [mService cancelAPNSForIOS: [args commArgs] deviceToken: [args deviceToken]];
  [outProtocol writeMessageBeginWithName: @"cancelAPNSForIOS"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

